{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorV2V3Interface} from \"../interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\n// solhint-disable\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`â€™s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`â€™s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/BondingCurveToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\n// Import OpenZeppelin contracts for security and standard functionality\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title DevToken - Bonding Curve Token Contract\r\n * @dev ERC20 token with automated pricing through a bonding curve mechanism\r\n * \r\n * Key Features:\r\n * - Bonding curve pricing: Price increases with supply, decreases when tokens are sold\r\n * - Continuous liquidity: Users can buy/sell directly with the contract\r\n * - Reserve-backed: All tokens backed by ETH held in contract reserves\r\n * - Fee mechanism: Configurable fees on buy/sell operations\r\n * - Owner controls: Administrative functions for fee and parameter management\r\n */\r\ncontract DevToken is ERC20, ERC20Burnable, Ownable, ReentrancyGuard {\r\n    \r\n    // ============ BONDING CURVE PARAMETERS ============\r\n    \r\n    /**\r\n     * @dev Scaling factor for precise calculations (10^18)\r\n     * Used to maintain precision in price calculations and avoid rounding errors\r\n     */\r\n    uint256 public constant SCALE = 10**18;\r\n    \r\n    /**\r\n     * @dev Reserve ratio in parts per million (PPM)\r\n     * 500000 = 50% - determines the steepness of the bonding curve\r\n     * Higher ratio = steeper curve (more price sensitive)\r\n     * Lower ratio = flatter curve (less price sensitive)\r\n     */\r\n    uint256 public reserveRatio = 500000;\r\n    \r\n    /**\r\n     * @dev Current ETH reserve balance backing the tokens\r\n     * This is the actual ETH that backs token value (excluding fees)\r\n     * Updated on every buy/sell transaction\r\n     */\r\n    uint256 public reserveBalance;\r\n    \r\n    /**\r\n     * @dev Initial token supply minted at contract creation\r\n     * Provides price stability and prevents division by zero in calculations\r\n     */\r\n    uint256 public constant INITIAL_SUPPLY = 1000 * 10**18;\r\n    \r\n    /**\r\n     * @dev Initial price per token in wei (0.001 ETH)\r\n     * Sets the starting point for the bonding curve\r\n     */\r\n    uint256 public constant INITIAL_PRICE = 10**15;\r\n    \r\n    // ============ FEE PARAMETERS ============\r\n    \r\n    /**\r\n     * @dev Fee charged on token purchases in basis points\r\n     * 100 = 1% fee on buy transactions\r\n     */\r\n    uint256 public buyFee = 100;\r\n    \r\n    /**\r\n     * @dev Fee charged on token sales in basis points  \r\n     * 200 = 2% fee on sell transactions\r\n     */\r\n    uint256 public sellFee = 200;\r\n    \r\n    /**\r\n     * @dev Maximum allowed fee to prevent excessive fee setting\r\n     * 1000 basis points = 10% maximum fee limit\r\n     */\r\n    uint256 public constant MAX_FEE = 1000;\r\n    \r\n    // ============ EVENTS ============\r\n    \r\n    /**\r\n     * @dev Emitted when tokens are purchased through the bonding curve\r\n     * @param buyer Address of the token purchaser\r\n     * @param ethSpent Total ETH sent by buyer (including fees)\r\n     * @param tokensReceived Number of tokens minted to buyer\r\n     * @param fee Fee amount deducted from the transaction\r\n     */\r\n    event TokensPurchased(address indexed buyer, uint256 ethSpent, uint256 tokensReceived, uint256 fee);\r\n    \r\n    /**\r\n     * @dev Emitted when tokens are sold back to the contract\r\n     * @param seller Address of the token seller  \r\n     * @param tokensSold Number of tokens burned in the sale\r\n     * @param ethReceived ETH amount received by seller (after fees)\r\n     * @param fee Fee amount deducted from the transaction\r\n     */\r\n    event TokensSold(address indexed seller, uint256 tokensSold, uint256 ethReceived, uint256 fee);\r\n    \r\n    /**\r\n     * @dev Emitted when the reserve ratio is updated by owner\r\n     * @param oldRatio Previous reserve ratio value\r\n     * @param newRatio New reserve ratio value\r\n     */\r\n    event ReserveRatioUpdated(uint256 oldRatio, uint256 newRatio);\r\n    \r\n    /**\r\n     * @dev Emitted when buy/sell fees are updated by owner\r\n     * @param newBuyFee New buy fee in basis points\r\n     * @param newSellFee New sell fee in basis points  \r\n     */\r\n    event FeesUpdated(uint256 newBuyFee, uint256 newSellFee);\r\n    \r\n    /**\r\n     * @dev Emitted when accumulated fees are withdrawn by owner\r\n     * @param amount Amount of ETH withdrawn\r\n     */\r\n    event ReserveFundsWithdrawn(uint256 amount);\r\n\r\n    // ============ CONSTRUCTOR ============\r\n    \r\n    /**\r\n     * @dev Initialize the contract with initial parameters\r\n     * Sets up the token with name \"DEV\", symbol \"DEV\"\r\n     * Mints initial supply to contract and establishes initial reserve balance\r\n     */\r\n    constructor() ERC20(\"DEV\", \"DEV\") Ownable(msg.sender) {\r\n        // Mint initial supply to the contract itself for price stability\r\n        // This prevents division by zero in price calculations\r\n        _mint(address(this), INITIAL_SUPPLY);\r\n        \r\n        // Calculate initial reserve balance based on initial supply and price\r\n        // This establishes the starting point for the bonding curve\r\n        reserveBalance = INITIAL_SUPPLY * INITIAL_PRICE / SCALE;\r\n    }\r\n\r\n    // ============ VIEW FUNCTIONS - BONDING CURVE CALCULATIONS ============\r\n\r\n    /**\r\n     * @dev Calculate how many tokens can be purchased with given ETH amount\r\n     * Uses simplified linear approximation for gas efficiency and safety\r\n     * \r\n     * @param ethAmount Amount of ETH to spend on tokens (in wei)\r\n     * @return tokensOut Number of tokens that would be received\r\n     * @return fee Fee amount that would be charged\r\n     */\r\n    function calculatePurchaseReturn(uint256 ethAmount) public view returns (uint256 tokensOut, uint256 fee) {\r\n        // Handle edge case of zero ETH\r\n        if (ethAmount == 0) return (0, 0);\r\n        \r\n        // Calculate buy fee (percentage of ETH amount)\r\n        fee = (ethAmount * buyFee) / 10000;\r\n        uint256 ethAfterFee = ethAmount - fee;\r\n        \r\n        // Handle edge case of zero total supply (shouldn't happen after constructor)\r\n        if (totalSupply() == 0) {\r\n            tokensOut = ethAfterFee * SCALE / INITIAL_PRICE;\r\n            return (tokensOut, fee);\r\n        }\r\n        \r\n        // Simplified bonding curve calculation\r\n        // Formula: tokens = (ethAfterFee Ã— totalSupply) Ã· (reserveBalance + ethAfterFee)\r\n        // This approximates the continuous bonding curve with a linear function\r\n        // More gas efficient than exponential calculations while maintaining curve properties\r\n        tokensOut = (ethAfterFee * totalSupply()) / (reserveBalance + ethAfterFee);\r\n        \r\n        return (tokensOut, fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate how much ETH will be received for selling tokens\r\n     * \r\n     * @param tokenAmount Number of tokens to sell\r\n     * @return ethOut Amount of ETH that would be received (after fees)\r\n     * @return fee Fee amount that would be charged\r\n     */\r\n    function calculateSaleReturn(uint256 tokenAmount) public view returns (uint256 ethOut, uint256 fee) {\r\n        // Validate input parameters\r\n        if (tokenAmount == 0 || tokenAmount > totalSupply()) return (0, 0);\r\n        \r\n        // Calculate proportional ETH return based on token percentage of total supply\r\n        // Formula: ethReturn = reserveBalance Ã— (tokenAmount Ã· totalSupply)\r\n        uint256 ethBeforeFee = (tokenAmount * reserveBalance) / totalSupply();\r\n        \r\n        // Calculate sell fee (percentage of ETH return)\r\n        fee = (ethBeforeFee * sellFee) / 10000;\r\n        ethOut = ethBeforeFee - fee;\r\n        \r\n        return (ethOut, fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Get current token price in ETH per token\r\n     * Price = reserveBalance Ã· totalSupply (scaled for precision)\r\n     * \r\n     * @return Current price in wei per token\r\n     */\r\n    function getCurrentPrice() external view returns (uint256) {\r\n        if (totalSupply() == 0) return INITIAL_PRICE;\r\n        return (reserveBalance * SCALE) / totalSupply();\r\n    }\r\n\r\n    // ============ TRADING FUNCTIONS ============\r\n\r\n    /**\r\n     * @dev Buy tokens with ETH using the bonding curve\r\n     * ETH is sent with the transaction, tokens are minted to the buyer\r\n     * \r\n     * Security features:\r\n     * - nonReentrant: Prevents reentrancy attacks\r\n     * - Input validation: Ensures positive ETH amount and sufficient return\r\n     * - State updates before external calls: Follows checks-effects-interactions pattern\r\n     */\r\n    function buyTokens() external payable nonReentrant {\r\n        require(msg.value > 0, \"Send ETH to buy tokens\");\r\n        \r\n        // Calculate tokens to mint and fee using bonding curve\r\n        (uint256 tokensToMint, uint256 fee) = calculatePurchaseReturn(msg.value);\r\n        require(tokensToMint > 0, \"Insufficient ETH for purchase\");\r\n        \r\n        // Update contract state BEFORE minting (checks-effects-interactions pattern)\r\n        // Add net ETH (after fee) to reserve balance\r\n        // Fee remains in contract balance but not in reserve\r\n        uint256 ethAfterFee = msg.value - fee;\r\n        reserveBalance += ethAfterFee;\r\n        \r\n        // Mint new tokens to the buyer\r\n        _mint(msg.sender, tokensToMint);\r\n        \r\n        // Emit event for transparency and off-chain tracking\r\n        emit TokensPurchased(msg.sender, msg.value, tokensToMint, fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Sell tokens for ETH using the bonding curve\r\n     * Tokens are burned, ETH is transferred to the seller\r\n     * \r\n     * @param tokenAmount Number of tokens to sell\r\n     * \r\n     * Security features:\r\n     * - nonReentrant: Prevents reentrancy attacks  \r\n     * - Balance validation: Ensures seller has sufficient tokens\r\n     * - Liquidity check: Ensures contract has enough ETH\r\n     * - State updates before external calls\r\n     */\r\n    function sellTokens(uint256 tokenAmount) external nonReentrant {\r\n        require(tokenAmount > 0, \"Amount must be > 0\");\r\n        require(balanceOf(msg.sender) >= tokenAmount, \"Insufficient token balance\");\r\n        \r\n        // Calculate ETH return and fee using bonding curve\r\n        (uint256 ethToReturn, uint256 fee) = calculateSaleReturn(tokenAmount);\r\n        require(ethToReturn > 0, \"No ETH to return\");\r\n        require(address(this).balance >= ethToReturn, \"Insufficient contract ETH balance\");\r\n        \r\n        // Update contract state BEFORE external call\r\n        // Reduce reserve by total ETH value (including fee)\r\n        uint256 totalEthValue = ethToReturn + fee;\r\n        reserveBalance -= totalEthValue;\r\n        \r\n        // Burn tokens from seller's balance\r\n        _burn(msg.sender, tokenAmount);\r\n        \r\n        // Transfer ETH to seller (fee remains in contract)\r\n        payable(msg.sender).transfer(ethToReturn);\r\n        \r\n        // Emit event for transparency and off-chain tracking\r\n        emit TokensSold(msg.sender, tokenAmount, ethToReturn, fee);\r\n    }\r\n\r\n    // ============ OWNER-ONLY FUNCTIONS ============\r\n\r\n    /**\r\n     * @dev Mint tokens directly to a recipient (bypasses bonding curve)\r\n     * Used for airdrops, rewards, or initial distribution\r\n     * Only callable by contract owner\r\n     * \r\n     * @param recipient Address to receive the minted tokens\r\n     * @param amount Number of tokens to mint\r\n     */\r\n    function mintTo(address recipient, uint256 amount) external onlyOwner {\r\n        _mint(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Override the standard burn function to include a fee mechanism\r\n     * When users burn tokens directly, a 2% fee is transferred to owner\r\n     * This incentivizes using the sellTokens function instead\r\n     * \r\n     * @param amount Number of tokens to burn\r\n     */\r\n    function burn(uint256 amount) public override {\r\n        require(amount > 0, \"Amount must be > 0\");\r\n        \r\n        // Calculate 2% fee on burn amount\r\n        uint256 fee = (amount * 2) / 100;\r\n        require(amount > fee, \"Amount must be greater than fee\");\r\n        \r\n        // Transfer fee to owner as tokens (not burned)\r\n        _transfer(msg.sender, owner(), fee);\r\n        \r\n        // Burn the remaining tokens (amount minus fee)\r\n        _burn(msg.sender, amount - fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the reserve ratio parameter\r\n     * Changes the steepness of the bonding curve\r\n     * Only callable by contract owner\r\n     * \r\n     * @param newRatio New reserve ratio in parts per million (1-1000000)\r\n     */\r\n    function setReserveRatio(uint256 newRatio) external onlyOwner {\r\n        require(newRatio > 0 && newRatio <= 1000000, \"Invalid reserve ratio\"); // 0-100%\r\n        \r\n        uint256 oldRatio = reserveRatio;\r\n        reserveRatio = newRatio;\r\n        \r\n        emit ReserveRatioUpdated(oldRatio, newRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Update buy and sell fee percentages\r\n     * Fees are capped at MAX_FEE to prevent abuse\r\n     * Only callable by contract owner\r\n     * \r\n     * @param newBuyFee New buy fee in basis points (max 1000 = 10%)\r\n     * @param newSellFee New sell fee in basis points (max 1000 = 10%)\r\n     */\r\n    function setFees(uint256 newBuyFee, uint256 newSellFee) external onlyOwner {\r\n        require(newBuyFee <= MAX_FEE && newSellFee <= MAX_FEE, \"Fee too high\");\r\n        \r\n        buyFee = newBuyFee;\r\n        sellFee = newSellFee;\r\n        \r\n        emit FeesUpdated(newBuyFee, newSellFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw accumulated fees from the contract\r\n     * Calculates excess ETH (contract balance - reserve balance) and transfers to owner\r\n     * Only callable by contract owner\r\n     * \r\n     * This function allows the owner to collect trading fees that have accumulated\r\n     * while preserving the reserve backing for all tokens\r\n     */\r\n    function withdrawFees() external onlyOwner {\r\n        // Calculate excess ETH = total contract balance - reserve balance\r\n        // This excess represents accumulated fees from trading\r\n        uint256 excessETH = address(this).balance - reserveBalance;\r\n        require(excessETH > 0, \"No fees to withdraw\");\r\n        \r\n        // Transfer excess ETH to owner\r\n        payable(owner()).transfer(excessETH);\r\n        \r\n        emit ReserveFundsWithdrawn(excessETH);\r\n    }\r\n\r\n    // ============ UTILITY FUNCTIONS ============\r\n\r\n    /**\r\n     * @dev Get token balance of an account (wrapper for compatibility)\r\n     * @param account Address to check balance for\r\n     * @return Token balance of the account\r\n     */\r\n    function getBalance(address account) external view returns (uint256) {\r\n        return balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Get comprehensive contract statistics\r\n     * Useful for frontend applications and monitoring\r\n     * \r\n     * @return _totalSupply Current total token supply\r\n     * @return _reserveBalance Current ETH reserve balance\r\n     * @return _currentPrice Current price per token in wei\r\n     * @return _contractETHBalance Total ETH balance in contract\r\n     * @return _availableFees Fees available for withdrawal by owner\r\n     */\r\n    function getContractStats() external view returns (\r\n        uint256 _totalSupply,\r\n        uint256 _reserveBalance,\r\n        uint256 _currentPrice,\r\n        uint256 _contractETHBalance,\r\n        uint256 _availableFees\r\n    ) {\r\n        _totalSupply = totalSupply();\r\n        _reserveBalance = reserveBalance;\r\n        _currentPrice = (_reserveBalance * SCALE) / _totalSupply;\r\n        _contractETHBalance = address(this).balance;\r\n        \r\n        // Available fees = contract balance - reserve balance\r\n        // If contract balance < reserve balance, no fees available (shouldn't happen)\r\n        _availableFees = _contractETHBalance > _reserveBalance ? \r\n                        _contractETHBalance - _reserveBalance : 0;\r\n    }\r\n\r\n    // ============ SECURITY FUNCTIONS ============\r\n\r\n    /**\r\n     * @dev Reject direct ETH transfers to contract\r\n     * Users must use buyTokens() function to purchase tokens\r\n     * Prevents accidental loss of ETH\r\n     */\r\n    receive() external payable {\r\n        revert(\"Use buyTokens() to purchase tokens\");\r\n    }\r\n\r\n    /**\r\n     * @dev Reject calls to non-existent functions\r\n     * Prevents accidental ETH loss from incorrect function calls\r\n     */\r\n    fallback() external payable {\r\n        revert(\"Use buyTokens() to purchase tokens\");\r\n    }\r\n}"
    },
    "contracts/ContriFlow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IERC20Burnable is IERC20 {\n    function burnFrom(address account, uint256 amount) external;\n}\n\ncontract ContriFlow is ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    IERC20Burnable public immutable token;\n    address private bot;\n\n    event DepositAdded(address indexed ownerAddress, uint256 amountWei);\n    event DepositRemoved(address indexed ownerAddress, uint256 amountWei);\n\n    event VoucherStored(\n        address indexed ownerAddress,\n        uint256 indexed repoGithubId,\n        uint256 indexed contributorGithubId,\n        uint256 ownerGithubId,\n        uint256 prNumber,\n        uint256 tokenAmountIn18dec,\n        bytes32 hash\n    );\n\n    event ClaimRequested(\n        bytes32 indexed voucherHash,\n        uint256 indexed repoGithubId,\n        uint256 indexed prNumber,\n        address requester,\n        address ownerAddress,\n        uint256 ownerGithubId,\n        uint256 tokenAmount,\n        uint256 platformFee,\n        string destinationChain\n    );\n\n    event ClaimFinalized(\n        bytes32 indexed voucherHash,\n        uint256 indexed repoGithubId,\n        uint256 indexed prNumber,\n        address claimant,\n        uint256 tokenAmount,\n        string destinationChain,\n        bytes relayerMetadata\n    );\n\n    error NotBotSigner();\n    error InvalidVoucher();\n    error VoucherExists();\n    error AlreadyClaimed();\n    error InsufficientAllowance();\n    error GithubIdNotSet();\n    error GithubIdMismatch();\n    error ClaimInProcess();\n\n    enum ClaimStatus {\n        CLAIMED,\n        UNCLAIMED,\n        PROCESSING\n    }\n\n    struct Voucher {\n        bytes32 hash;\n        uint256 contributorGithubId;\n        uint256 tokenAmountIn18dec; // token amount (18-dec scale)\n        ClaimStatus claimed;\n    }\n\n    // address -> github id\n    mapping(address => uint256) public ownerDetails;\n\n    // repoOwnerGithubId -> repoId -> prNumber -> Voucher\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => Voucher)))\n        public vouchersByRepoAndPr;\n\n    constructor(address tokenAddress) Ownable(msg.sender) {\n        require(tokenAddress != address(0), \"zero token\");\n        token = IERC20Burnable(tokenAddress);\n        bot = msg.sender; // initial bot = deployer; changeable by owner\n    }\n\n    modifier onlyBot() {\n        if (msg.sender != bot) revert NotBotSigner();\n        _;\n    }\n\n    /// Owner registers GitHub id and optionally deposits tokens via transferFrom.\n    function addAmount(uint256 githubId, uint256 amount) external {\n        if (githubId == 0) revert GithubIdNotSet();\n\n        uint256 existing = ownerDetails[msg.sender];\n        if (existing == 0) {\n            // first time registration\n            ownerDetails[msg.sender] = githubId;\n        } else {\n            // must match previously registered id\n            if (existing != githubId) revert GithubIdMismatch();\n        }\n\n        if (amount > 0) {\n            // caller must approve this contract for `amount` beforehand if they want to deposit\n            IERC20(address(token)).safeTransferFrom(msg.sender, address(this), amount);\n            emit DepositAdded(msg.sender, amount);\n        }\n    }\n\n    /// Only owner can change the bot signer (safer)\n    function setBotSigner(address newBot) external onlyOwner {\n        bot = newBot;\n    }\n\n    function storeVoucher(\n        address ownerAddress,\n        uint256 ownerGithubId,\n        uint256 repoGithubId,\n        uint256 contributorGithubId,\n        uint256 prNumber,\n        uint256 tokenAmountIn18dec,\n        bytes32 hash\n    ) external onlyBot {\n        // enforce ownerAddress is registered with the provided GitHub ID\n        uint256 githubId = ownerDetails[ownerAddress];\n        if (githubId == 0 || githubId != ownerGithubId) revert GithubIdNotSet();\n\n        if (vouchersByRepoAndPr[ownerGithubId][repoGithubId][prNumber].hash != bytes32(0))\n            revert VoucherExists();\n\n        require(tokenAmountIn18dec > 0, \"Invalid token amount\");\n\n        vouchersByRepoAndPr[ownerGithubId][repoGithubId][prNumber] = Voucher({\n            hash: hash,\n            contributorGithubId: contributorGithubId,\n            tokenAmountIn18dec: tokenAmountIn18dec,\n            claimed: ClaimStatus.UNCLAIMED\n        });\n\n        emit VoucherStored(\n            ownerAddress,\n            repoGithubId,\n            contributorGithubId,\n            ownerGithubId,\n            prNumber,\n            tokenAmountIn18dec,\n            hash\n        );\n    }\n\n    /// Request a cross-chain claim:\n    ///  - checks voucher & marks PROCESSING\n    ///  - pulls platformFee from ownerAddress -> platform (owner())\n    ///  - burns tokenAmount from ownerAddress (requires allowance for burnFrom)\n    ///  - emits ClaimRequested for relayer to pick up\n    function requestClaim(\n        string calldata secret,\n        address ownerAddr, // renamed to reduce stack pressure\n        uint256 ownerGithubId,\n        uint256 repoGithubId,\n        uint256 prNumber,\n        uint256 contributorGithubId,\n        uint256 tokenAmountIn18dec,\n        string calldata destinationChain\n    ) external nonReentrant {\n        Voucher storage v = vouchersByRepoAndPr[ownerGithubId][repoGithubId][prNumber];\n\n        if (v.hash == bytes32(0)) revert InvalidVoucher();\n\n        // Recompute voucher hash exactly like off-chain\n        bytes32 calculatedHash = keccak256(\n            abi.encodePacked(\n                secret,\n                ownerAddr,\n                ownerGithubId,\n                repoGithubId,\n                prNumber,\n                contributorGithubId,\n                tokenAmountIn18dec\n            )\n        );\n\n        // validate & mark processing (internal helper)\n        _validateVoucherAndMarkProcessing(v, calculatedHash, contributorGithubId, tokenAmountIn18dec);\n\n        uint256 platformFee = (tokenAmountIn18dec * 2) / 100;\n\n        // collect fee and burn (internal helper)\n        _collectFeeAndBurn(ownerAddr, tokenAmountIn18dec, platformFee);\n\n        emit ClaimRequested(\n            v.hash,\n            repoGithubId,\n            prNumber,\n            msg.sender,\n            ownerAddr,\n            ownerGithubId,\n            tokenAmountIn18dec,\n            platformFee,\n            destinationChain\n        );\n    }\n\n    /// Internal: validate voucher details and mark it PROCESSING\n    function _validateVoucherAndMarkProcessing(\n        Voucher storage v,\n        bytes32 calculatedHash,\n        uint256 contributorGithubId,\n        uint256 tokenAmountIn18dec\n    ) internal {\n        if (\n            v.hash != calculatedHash ||\n            v.contributorGithubId != contributorGithubId ||\n            v.tokenAmountIn18dec != tokenAmountIn18dec\n        ) revert InvalidVoucher();\n\n        if (v.claimed == ClaimStatus.PROCESSING) revert ClaimInProcess();\n        if (v.claimed == ClaimStatus.CLAIMED) revert AlreadyClaimed();\n\n        // mark processing before external calls\n        v.claimed = ClaimStatus.PROCESSING;\n    }\n\n    /// Internal: check allowance, transfer platform fee, burn tokens from ownerAddr\n    function _collectFeeAndBurn(\n        address ownerAddr,\n        uint256 tokenAmountIn18dec,\n        uint256 platformFee\n    ) internal {\n        uint256 required = tokenAmountIn18dec + platformFee;\n        if (token.allowance(ownerAddr, address(this)) < required) revert InsufficientAllowance();\n\n        // pull fee to platform owner\n        IERC20(address(token)).safeTransferFrom(ownerAddr, owner(), platformFee);\n\n        // burn requested tokens from owner (reduces totalSupply)\n        token.burnFrom(ownerAddr, tokenAmountIn18dec);\n    }\n\n    /// Called by your relayer (bot) AFTER it has confirmed successful mint on the destination chain.\n    /// relayer should verify off-chain; on-chain we just restrict to bot signer and voucher status.\n    function finalizeClaim(\n        uint256 ownerGithubId,\n        uint256 repoGithubId,\n        uint256 prNumber,\n        address claimer,\n        uint256 tokenAmountIn18dec,\n        string calldata destinationChain,\n        bytes calldata relayerMetadata\n    ) external onlyBot {\n        Voucher storage v = vouchersByRepoAndPr[ownerGithubId][repoGithubId][prNumber];\n\n        if (v.hash == bytes32(0)) revert InvalidVoucher();\n        if (v.claimed != ClaimStatus.PROCESSING) revert ClaimInProcess();\n\n        // mark claimed\n        v.claimed = ClaimStatus.CLAIMED;\n\n        emit ClaimFinalized(v.hash, repoGithubId, prNumber, claimer, tokenAmountIn18dec, destinationChain, relayerMetadata);\n    }\n\n    /// view helpers\n    function getOwnerDetails(address ownerAddress) external view returns (uint256) {\n        return ownerDetails[ownerAddress];\n    }\n\n    function getVoucherDetails(\n        uint256 repoOwnerGithubId,\n        uint256 repoId,\n        uint256 prNumber\n    ) external view returns (Voucher memory) {\n        return vouchersByRepoAndPr[repoOwnerGithubId][repoId][prNumber];\n    }\n\n    function getCurrentSigner() external view returns (address) {\n        return bot;\n    }\n\n    // receive/fallback kept for compatibility\n    fallback() external payable {}\n    receive() external payable {}\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        // Chainlink returns price with 8 decimals, convert to 18 decimals (wei)\r\n        return uint256(answer) * 1e10;\r\n    }\r\n\r\n    /// @notice Converts USD amount (8 decimals) to ETH amount (in wei)\r\n    /// @param usdAmount The amount in USD (e.g., $50 = 50 * 1e8)\r\n    function getEthAmountFromUsd(\r\n        uint256 usdAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed); // ETH price in USD, 18 decimals\r\n        // USD has 8 decimals, so multiply by 1e18 to get wei, then divide by price\r\n        return (usdAmount * 1e18) / ethPrice;\r\n    }\r\n}\r\n"
    },
    "contracts/test/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/shared/mocks/MockV3Aggregator.sol\";"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}