{
  "address": "0x5E420bad5096E7E16Ec635Cb5470500A70006cA5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBuyFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSellFee",
          "type": "uint256"
        }
      ],
      "name": "FeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReserveFundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRatio",
          "type": "uint256"
        }
      ],
      "name": "ReserveRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethSpent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "TokensPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "TokensSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "INITIAL_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INITIAL_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "calculatePurchaseReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateSaleReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_contractETHBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_availableFees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "sellTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBuyFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSellFee",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRatio",
          "type": "uint256"
        }
      ],
      "name": "setReserveRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x186851f1d72fa8925609bc4c43f5688daefb18a1fea54db1b63d711fb19c4127",
  "receipt": {
    "to": null,
    "from": "0x81f99A1397B8f60Aa2B75753ad2BF39F298b8b87",
    "contractAddress": "0x5E420bad5096E7E16Ec635Cb5470500A70006cA5",
    "transactionIndex": 48,
    "gasUsed": "2487638",
    "logsBloom": "0x
    "blockHash": "0x7e6b0a76760fb0a9daae8d2497bdd73b2afd2aabf1aae5fa582437dc374e08b1",
    "transactionHash": "0x186851f1d72fa8925609bc4c43f5688daefb18a1fea54db1b63d711fb19c4127",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 9260764,
        "transactionHash": "0x186851f1d72fa8925609bc4c43f5688daefb18a1fea54db1b63d711fb19c4127",
        "address": "0x5E420bad5096E7E16Ec635Cb5470500A70006cA5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000081f99a1397b8f60aa2b75753ad2bf39f298b8b87"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x7e6b0a76760fb0a9daae8d2497bdd73b2afd2aabf1aae5fa582437dc374e08b1"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 9260764,
        "transactionHash": "0x186851f1d72fa8925609bc4c43f5688daefb18a1fea54db1b63d711fb19c4127",
        "address": "0x5E420bad5096E7E16Ec635Cb5470500A70006cA5",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005e420bad5096e7e16ec635cb5470500a70006ca5"
        ],
        "data": "0x00000000000000000000000000000000000000000000003635c9adc5dea00000",
        "logIndex": 40,
        "blockHash": "0x7e6b0a76760fb0a9daae8d2497bdd73b2afd2aabf1aae5fa582437dc374e08b1"
      }
    ],
    "blockNumber": 9260764,
    "cumulativeGasUsed": "5597202",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8ce5df30d083bee60fddf51fcca0452a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"ReserveRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"INITIAL_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"calculatePurchaseReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSaleReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractETHBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_availableFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"setReserveRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"ERC20 token with automated pricing through a bonding curve mechanism  Key Features: - Bonding curve pricing: Price increases with supply, decreases when tokens are sold - Continuous liquidity: Users can buy/sell directly with the contract - Reserve-backed: All tokens backed by ETH held in contract reserves - Fee mechanism: Configurable fees on buy/sell operations - Owner controls: Administrative functions for fee and parameter management\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"FeesUpdated(uint256,uint256)\":{\"details\":\"Emitted when buy/sell fees are updated by owner\",\"params\":{\"newBuyFee\":\"New buy fee in basis points\",\"newSellFee\":\"New sell fee in basis points  \"}},\"ReserveFundsWithdrawn(uint256)\":{\"details\":\"Emitted when accumulated fees are withdrawn by owner\",\"params\":{\"amount\":\"Amount of ETH withdrawn\"}},\"ReserveRatioUpdated(uint256,uint256)\":{\"details\":\"Emitted when the reserve ratio is updated by owner\",\"params\":{\"newRatio\":\"New reserve ratio value\",\"oldRatio\":\"Previous reserve ratio value\"}},\"TokensPurchased(address,uint256,uint256,uint256)\":{\"details\":\"Emitted when tokens are purchased through the bonding curve\",\"params\":{\"buyer\":\"Address of the token purchaser\",\"ethSpent\":\"Total ETH sent by buyer (including fees)\",\"fee\":\"Fee amount deducted from the transaction\",\"tokensReceived\":\"Number of tokens minted to buyer\"}},\"TokensSold(address,uint256,uint256,uint256)\":{\"details\":\"Emitted when tokens are sold back to the contract\",\"params\":{\"ethReceived\":\"ETH amount received by seller (after fees)\",\"fee\":\"Fee amount deducted from the transaction\",\"seller\":\"Address of the token seller  \",\"tokensSold\":\"Number of tokens burned in the sale\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"burn(uint256)\":{\"details\":\"Override the standard burn function to include a fee mechanism When users burn tokens directly, a 2% fee is transferred to owner This incentivizes using the sellTokens function instead \",\"params\":{\"amount\":\"Number of tokens to burn\"}},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"buyTokens()\":{\"details\":\"Buy tokens with ETH using the bonding curve ETH is sent with the transaction, tokens are minted to the buyer  Security features: - nonReentrant: Prevents reentrancy attacks - Input validation: Ensures positive ETH amount and sufficient return - State updates before external calls: Follows checks-effects-interactions pattern\"},\"calculatePurchaseReturn(uint256)\":{\"details\":\"Calculate how many tokens can be purchased with given ETH amount Uses simplified linear approximation for gas efficiency and safety \",\"params\":{\"ethAmount\":\"Amount of ETH to spend on tokens (in wei)\"},\"returns\":{\"fee\":\"Fee amount that would be charged\",\"tokensOut\":\"Number of tokens that would be received\"}},\"calculateSaleReturn(uint256)\":{\"details\":\"Calculate how much ETH will be received for selling tokens \",\"params\":{\"tokenAmount\":\"Number of tokens to sell\"},\"returns\":{\"ethOut\":\"Amount of ETH that would be received (after fees)\",\"fee\":\"Fee amount that would be charged\"}},\"constructor\":{\"details\":\"Initialize the contract with initial parameters Sets up the token with name \\\"DEV\\\", symbol \\\"DEV\\\" Mints initial supply to contract and establishes initial reserve balance\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"getBalance(address)\":{\"details\":\"Get token balance of an account (wrapper for compatibility)\",\"params\":{\"account\":\"Address to check balance for\"},\"returns\":{\"_0\":\"Token balance of the account\"}},\"getContractStats()\":{\"details\":\"Get comprehensive contract statistics Useful for frontend applications and monitoring \",\"returns\":{\"_availableFees\":\"Fees available for withdrawal by owner\",\"_contractETHBalance\":\"Total ETH balance in contract\",\"_currentPrice\":\"Current price per token in wei\",\"_reserveBalance\":\"Current ETH reserve balance\",\"_totalSupply\":\"Current total token supply\"}},\"getCurrentPrice()\":{\"details\":\"Get current token price in ETH per token Price = reserveBalance \\u00f7 totalSupply (scaled for precision) \",\"returns\":{\"_0\":\"Current price in wei per token\"}},\"mintTo(address,uint256)\":{\"details\":\"Mint tokens directly to a recipient (bypasses bonding curve) Used for airdrops, rewards, or initial distribution Only callable by contract owner \",\"params\":{\"amount\":\"Number of tokens to mint\",\"recipient\":\"Address to receive the minted tokens\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sellTokens(uint256)\":{\"details\":\"Sell tokens for ETH using the bonding curve Tokens are burned, ETH is transferred to the seller \",\"params\":{\"tokenAmount\":\"Number of tokens to sell  Security features: - nonReentrant: Prevents reentrancy attacks   - Balance validation: Ensures seller has sufficient tokens - Liquidity check: Ensures contract has enough ETH - State updates before external calls\"}},\"setFees(uint256,uint256)\":{\"details\":\"Update buy and sell fee percentages Fees are capped at MAX_FEE to prevent abuse Only callable by contract owner \",\"params\":{\"newBuyFee\":\"New buy fee in basis points (max 1000 = 10%)\",\"newSellFee\":\"New sell fee in basis points (max 1000 = 10%)\"}},\"setReserveRatio(uint256)\":{\"details\":\"Update the reserve ratio parameter Changes the steepness of the bonding curve Only callable by contract owner \",\"params\":{\"newRatio\":\"New reserve ratio in parts per million (1-1000000)\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFees()\":{\"details\":\"Withdraw accumulated fees from the contract Calculates excess ETH (contract balance - reserve balance) and transfers to owner Only callable by contract owner  This function allows the owner to collect trading fees that have accumulated while preserving the reserve backing for all tokens\"}},\"stateVariables\":{\"INITIAL_PRICE\":{\"details\":\"Initial price per token in wei (0.001 ETH) Sets the starting point for the bonding curve\"},\"INITIAL_SUPPLY\":{\"details\":\"Initial token supply minted at contract creation Provides price stability and prevents division by zero in calculations\"},\"MAX_FEE\":{\"details\":\"Maximum allowed fee to prevent excessive fee setting 1000 basis points = 10% maximum fee limit\"},\"SCALE\":{\"details\":\"Scaling factor for precise calculations (10^18) Used to maintain precision in price calculations and avoid rounding errors\"},\"buyFee\":{\"details\":\"Fee charged on token purchases in basis points 100 = 1% fee on buy transactions\"},\"reserveBalance\":{\"details\":\"Current ETH reserve balance backing the tokens This is the actual ETH that backs token value (excluding fees) Updated on every buy/sell transaction\"},\"reserveRatio\":{\"details\":\"Reserve ratio in parts per million (PPM) 500000 = 50% - determines the steepness of the bonding curve Higher ratio = steeper curve (more price sensitive) Lower ratio = flatter curve (less price sensitive)\"},\"sellFee\":{\"details\":\"Fee charged on token sales in basis points   200 = 2% fee on sell transactions\"}},\"title\":\"DevToken - Bonding Curve Token Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondingCurveToken.sol\":\"DevToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/BondingCurveToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\n// Import OpenZeppelin contracts for security and standard functionality\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DevToken - Bonding Curve Token Contract\\r\\n * @dev ERC20 token with automated pricing through a bonding curve mechanism\\r\\n * \\r\\n * Key Features:\\r\\n * - Bonding curve pricing: Price increases with supply, decreases when tokens are sold\\r\\n * - Continuous liquidity: Users can buy/sell directly with the contract\\r\\n * - Reserve-backed: All tokens backed by ETH held in contract reserves\\r\\n * - Fee mechanism: Configurable fees on buy/sell operations\\r\\n * - Owner controls: Administrative functions for fee and parameter management\\r\\n */\\r\\ncontract DevToken is ERC20, ERC20Burnable, Ownable, ReentrancyGuard {\\r\\n    \\r\\n    // ============ BONDING CURVE PARAMETERS ============\\r\\n    \\r\\n    /**\\r\\n     * @dev Scaling factor for precise calculations (10^18)\\r\\n     * Used to maintain precision in price calculations and avoid rounding errors\\r\\n     */\\r\\n    uint256 public constant SCALE = 10**18;\\r\\n    \\r\\n    /**\\r\\n     * @dev Reserve ratio in parts per million (PPM)\\r\\n     * 500000 = 50% - determines the steepness of the bonding curve\\r\\n     * Higher ratio = steeper curve (more price sensitive)\\r\\n     * Lower ratio = flatter curve (less price sensitive)\\r\\n     */\\r\\n    uint256 public reserveRatio = 500000;\\r\\n    \\r\\n    /**\\r\\n     * @dev Current ETH reserve balance backing the tokens\\r\\n     * This is the actual ETH that backs token value (excluding fees)\\r\\n     * Updated on every buy/sell transaction\\r\\n     */\\r\\n    uint256 public reserveBalance;\\r\\n    \\r\\n    /**\\r\\n     * @dev Initial token supply minted at contract creation\\r\\n     * Provides price stability and prevents division by zero in calculations\\r\\n     */\\r\\n    uint256 public constant INITIAL_SUPPLY = 1000 * 10**18;\\r\\n    \\r\\n    /**\\r\\n     * @dev Initial price per token in wei (0.001 ETH)\\r\\n     * Sets the starting point for the bonding curve\\r\\n     */\\r\\n    uint256 public constant INITIAL_PRICE = 10**15;\\r\\n    \\r\\n    // ============ FEE PARAMETERS ============\\r\\n    \\r\\n    /**\\r\\n     * @dev Fee charged on token purchases in basis points\\r\\n     * 100 = 1% fee on buy transactions\\r\\n     */\\r\\n    uint256 public buyFee = 100;\\r\\n    \\r\\n    /**\\r\\n     * @dev Fee charged on token sales in basis points  \\r\\n     * 200 = 2% fee on sell transactions\\r\\n     */\\r\\n    uint256 public sellFee = 200;\\r\\n    \\r\\n    /**\\r\\n     * @dev Maximum allowed fee to prevent excessive fee setting\\r\\n     * 1000 basis points = 10% maximum fee limit\\r\\n     */\\r\\n    uint256 public constant MAX_FEE = 1000;\\r\\n    \\r\\n    // ============ EVENTS ============\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when tokens are purchased through the bonding curve\\r\\n     * @param buyer Address of the token purchaser\\r\\n     * @param ethSpent Total ETH sent by buyer (including fees)\\r\\n     * @param tokensReceived Number of tokens minted to buyer\\r\\n     * @param fee Fee amount deducted from the transaction\\r\\n     */\\r\\n    event TokensPurchased(address indexed buyer, uint256 ethSpent, uint256 tokensReceived, uint256 fee);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when tokens are sold back to the contract\\r\\n     * @param seller Address of the token seller  \\r\\n     * @param tokensSold Number of tokens burned in the sale\\r\\n     * @param ethReceived ETH amount received by seller (after fees)\\r\\n     * @param fee Fee amount deducted from the transaction\\r\\n     */\\r\\n    event TokensSold(address indexed seller, uint256 tokensSold, uint256 ethReceived, uint256 fee);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the reserve ratio is updated by owner\\r\\n     * @param oldRatio Previous reserve ratio value\\r\\n     * @param newRatio New reserve ratio value\\r\\n     */\\r\\n    event ReserveRatioUpdated(uint256 oldRatio, uint256 newRatio);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when buy/sell fees are updated by owner\\r\\n     * @param newBuyFee New buy fee in basis points\\r\\n     * @param newSellFee New sell fee in basis points  \\r\\n     */\\r\\n    event FeesUpdated(uint256 newBuyFee, uint256 newSellFee);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when accumulated fees are withdrawn by owner\\r\\n     * @param amount Amount of ETH withdrawn\\r\\n     */\\r\\n    event ReserveFundsWithdrawn(uint256 amount);\\r\\n\\r\\n    // ============ CONSTRUCTOR ============\\r\\n    \\r\\n    /**\\r\\n     * @dev Initialize the contract with initial parameters\\r\\n     * Sets up the token with name \\\"DEV\\\", symbol \\\"DEV\\\"\\r\\n     * Mints initial supply to contract and establishes initial reserve balance\\r\\n     */\\r\\n    constructor() ERC20(\\\"DEV\\\", \\\"DEV\\\") Ownable(msg.sender) {\\r\\n        // Mint initial supply to the contract itself for price stability\\r\\n        // This prevents division by zero in price calculations\\r\\n        _mint(address(this), INITIAL_SUPPLY);\\r\\n        \\r\\n        // Calculate initial reserve balance based on initial supply and price\\r\\n        // This establishes the starting point for the bonding curve\\r\\n        reserveBalance = INITIAL_SUPPLY * INITIAL_PRICE / SCALE;\\r\\n    }\\r\\n\\r\\n    // ============ VIEW FUNCTIONS - BONDING CURVE CALCULATIONS ============\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate how many tokens can be purchased with given ETH amount\\r\\n     * Uses simplified linear approximation for gas efficiency and safety\\r\\n     * \\r\\n     * @param ethAmount Amount of ETH to spend on tokens (in wei)\\r\\n     * @return tokensOut Number of tokens that would be received\\r\\n     * @return fee Fee amount that would be charged\\r\\n     */\\r\\n    function calculatePurchaseReturn(uint256 ethAmount) public view returns (uint256 tokensOut, uint256 fee) {\\r\\n        // Handle edge case of zero ETH\\r\\n        if (ethAmount == 0) return (0, 0);\\r\\n        \\r\\n        // Calculate buy fee (percentage of ETH amount)\\r\\n        fee = (ethAmount * buyFee) / 10000;\\r\\n        uint256 ethAfterFee = ethAmount - fee;\\r\\n        \\r\\n        // Handle edge case of zero total supply (shouldn't happen after constructor)\\r\\n        if (totalSupply() == 0) {\\r\\n            tokensOut = ethAfterFee * SCALE / INITIAL_PRICE;\\r\\n            return (tokensOut, fee);\\r\\n        }\\r\\n        \\r\\n        // Simplified bonding curve calculation\\r\\n        // Formula: tokens = (ethAfterFee \\u00d7 totalSupply) \\u00f7 (reserveBalance + ethAfterFee)\\r\\n        // This approximates the continuous bonding curve with a linear function\\r\\n        // More gas efficient than exponential calculations while maintaining curve properties\\r\\n        tokensOut = (ethAfterFee * totalSupply()) / (reserveBalance + ethAfterFee);\\r\\n        \\r\\n        return (tokensOut, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculate how much ETH will be received for selling tokens\\r\\n     * \\r\\n     * @param tokenAmount Number of tokens to sell\\r\\n     * @return ethOut Amount of ETH that would be received (after fees)\\r\\n     * @return fee Fee amount that would be charged\\r\\n     */\\r\\n    function calculateSaleReturn(uint256 tokenAmount) public view returns (uint256 ethOut, uint256 fee) {\\r\\n        // Validate input parameters\\r\\n        if (tokenAmount == 0 || tokenAmount > totalSupply()) return (0, 0);\\r\\n        \\r\\n        // Calculate proportional ETH return based on token percentage of total supply\\r\\n        // Formula: ethReturn = reserveBalance \\u00d7 (tokenAmount \\u00f7 totalSupply)\\r\\n        uint256 ethBeforeFee = (tokenAmount * reserveBalance) / totalSupply();\\r\\n        \\r\\n        // Calculate sell fee (percentage of ETH return)\\r\\n        fee = (ethBeforeFee * sellFee) / 10000;\\r\\n        ethOut = ethBeforeFee - fee;\\r\\n        \\r\\n        return (ethOut, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get current token price in ETH per token\\r\\n     * Price = reserveBalance \\u00f7 totalSupply (scaled for precision)\\r\\n     * \\r\\n     * @return Current price in wei per token\\r\\n     */\\r\\n    function getCurrentPrice() external view returns (uint256) {\\r\\n        if (totalSupply() == 0) return INITIAL_PRICE;\\r\\n        return (reserveBalance * SCALE) / totalSupply();\\r\\n    }\\r\\n\\r\\n    // ============ TRADING FUNCTIONS ============\\r\\n\\r\\n    /**\\r\\n     * @dev Buy tokens with ETH using the bonding curve\\r\\n     * ETH is sent with the transaction, tokens are minted to the buyer\\r\\n     * \\r\\n     * Security features:\\r\\n     * - nonReentrant: Prevents reentrancy attacks\\r\\n     * - Input validation: Ensures positive ETH amount and sufficient return\\r\\n     * - State updates before external calls: Follows checks-effects-interactions pattern\\r\\n     */\\r\\n    function buyTokens() external payable nonReentrant {\\r\\n        require(msg.value > 0, \\\"Send ETH to buy tokens\\\");\\r\\n        \\r\\n        // Calculate tokens to mint and fee using bonding curve\\r\\n        (uint256 tokensToMint, uint256 fee) = calculatePurchaseReturn(msg.value);\\r\\n        require(tokensToMint > 0, \\\"Insufficient ETH for purchase\\\");\\r\\n        \\r\\n        // Update contract state BEFORE minting (checks-effects-interactions pattern)\\r\\n        // Add net ETH (after fee) to reserve balance\\r\\n        // Fee remains in contract balance but not in reserve\\r\\n        uint256 ethAfterFee = msg.value - fee;\\r\\n        reserveBalance += ethAfterFee;\\r\\n        \\r\\n        // Mint new tokens to the buyer\\r\\n        _mint(msg.sender, tokensToMint);\\r\\n        \\r\\n        // Emit event for transparency and off-chain tracking\\r\\n        emit TokensPurchased(msg.sender, msg.value, tokensToMint, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sell tokens for ETH using the bonding curve\\r\\n     * Tokens are burned, ETH is transferred to the seller\\r\\n     * \\r\\n     * @param tokenAmount Number of tokens to sell\\r\\n     * \\r\\n     * Security features:\\r\\n     * - nonReentrant: Prevents reentrancy attacks  \\r\\n     * - Balance validation: Ensures seller has sufficient tokens\\r\\n     * - Liquidity check: Ensures contract has enough ETH\\r\\n     * - State updates before external calls\\r\\n     */\\r\\n    function sellTokens(uint256 tokenAmount) external nonReentrant {\\r\\n        require(tokenAmount > 0, \\\"Amount must be > 0\\\");\\r\\n        require(balanceOf(msg.sender) >= tokenAmount, \\\"Insufficient token balance\\\");\\r\\n        \\r\\n        // Calculate ETH return and fee using bonding curve\\r\\n        (uint256 ethToReturn, uint256 fee) = calculateSaleReturn(tokenAmount);\\r\\n        require(ethToReturn > 0, \\\"No ETH to return\\\");\\r\\n        require(address(this).balance >= ethToReturn, \\\"Insufficient contract ETH balance\\\");\\r\\n        \\r\\n        // Update contract state BEFORE external call\\r\\n        // Reduce reserve by total ETH value (including fee)\\r\\n        uint256 totalEthValue = ethToReturn + fee;\\r\\n        reserveBalance -= totalEthValue;\\r\\n        \\r\\n        // Burn tokens from seller's balance\\r\\n        _burn(msg.sender, tokenAmount);\\r\\n        \\r\\n        // Transfer ETH to seller (fee remains in contract)\\r\\n        payable(msg.sender).transfer(ethToReturn);\\r\\n        \\r\\n        // Emit event for transparency and off-chain tracking\\r\\n        emit TokensSold(msg.sender, tokenAmount, ethToReturn, fee);\\r\\n    }\\r\\n\\r\\n    // ============ OWNER-ONLY FUNCTIONS ============\\r\\n\\r\\n    /**\\r\\n     * @dev Mint tokens directly to a recipient (bypasses bonding curve)\\r\\n     * Used for airdrops, rewards, or initial distribution\\r\\n     * Only callable by contract owner\\r\\n     * \\r\\n     * @param recipient Address to receive the minted tokens\\r\\n     * @param amount Number of tokens to mint\\r\\n     */\\r\\n    function mintTo(address recipient, uint256 amount) external onlyOwner {\\r\\n        _mint(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override the standard burn function to include a fee mechanism\\r\\n     * When users burn tokens directly, a 2% fee is transferred to owner\\r\\n     * This incentivizes using the sellTokens function instead\\r\\n     * \\r\\n     * @param amount Number of tokens to burn\\r\\n     */\\r\\n    function burn(uint256 amount) public override {\\r\\n        require(amount > 0, \\\"Amount must be > 0\\\");\\r\\n        \\r\\n        // Calculate 2% fee on burn amount\\r\\n        uint256 fee = (amount * 2) / 100;\\r\\n        require(amount > fee, \\\"Amount must be greater than fee\\\");\\r\\n        \\r\\n        // Transfer fee to owner as tokens (not burned)\\r\\n        _transfer(msg.sender, owner(), fee);\\r\\n        \\r\\n        // Burn the remaining tokens (amount minus fee)\\r\\n        _burn(msg.sender, amount - fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update the reserve ratio parameter\\r\\n     * Changes the steepness of the bonding curve\\r\\n     * Only callable by contract owner\\r\\n     * \\r\\n     * @param newRatio New reserve ratio in parts per million (1-1000000)\\r\\n     */\\r\\n    function setReserveRatio(uint256 newRatio) external onlyOwner {\\r\\n        require(newRatio > 0 && newRatio <= 1000000, \\\"Invalid reserve ratio\\\"); // 0-100%\\r\\n        \\r\\n        uint256 oldRatio = reserveRatio;\\r\\n        reserveRatio = newRatio;\\r\\n        \\r\\n        emit ReserveRatioUpdated(oldRatio, newRatio);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update buy and sell fee percentages\\r\\n     * Fees are capped at MAX_FEE to prevent abuse\\r\\n     * Only callable by contract owner\\r\\n     * \\r\\n     * @param newBuyFee New buy fee in basis points (max 1000 = 10%)\\r\\n     * @param newSellFee New sell fee in basis points (max 1000 = 10%)\\r\\n     */\\r\\n    function setFees(uint256 newBuyFee, uint256 newSellFee) external onlyOwner {\\r\\n        require(newBuyFee <= MAX_FEE && newSellFee <= MAX_FEE, \\\"Fee too high\\\");\\r\\n        \\r\\n        buyFee = newBuyFee;\\r\\n        sellFee = newSellFee;\\r\\n        \\r\\n        emit FeesUpdated(newBuyFee, newSellFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw accumulated fees from the contract\\r\\n     * Calculates excess ETH (contract balance - reserve balance) and transfers to owner\\r\\n     * Only callable by contract owner\\r\\n     * \\r\\n     * This function allows the owner to collect trading fees that have accumulated\\r\\n     * while preserving the reserve backing for all tokens\\r\\n     */\\r\\n    function withdrawFees() external onlyOwner {\\r\\n        // Calculate excess ETH = total contract balance - reserve balance\\r\\n        // This excess represents accumulated fees from trading\\r\\n        uint256 excessETH = address(this).balance - reserveBalance;\\r\\n        require(excessETH > 0, \\\"No fees to withdraw\\\");\\r\\n        \\r\\n        // Transfer excess ETH to owner\\r\\n        payable(owner()).transfer(excessETH);\\r\\n        \\r\\n        emit ReserveFundsWithdrawn(excessETH);\\r\\n    }\\r\\n\\r\\n    // ============ UTILITY FUNCTIONS ============\\r\\n\\r\\n    /**\\r\\n     * @dev Get token balance of an account (wrapper for compatibility)\\r\\n     * @param account Address to check balance for\\r\\n     * @return Token balance of the account\\r\\n     */\\r\\n    function getBalance(address account) external view returns (uint256) {\\r\\n        return balanceOf(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get comprehensive contract statistics\\r\\n     * Useful for frontend applications and monitoring\\r\\n     * \\r\\n     * @return _totalSupply Current total token supply\\r\\n     * @return _reserveBalance Current ETH reserve balance\\r\\n     * @return _currentPrice Current price per token in wei\\r\\n     * @return _contractETHBalance Total ETH balance in contract\\r\\n     * @return _availableFees Fees available for withdrawal by owner\\r\\n     */\\r\\n    function getContractStats() external view returns (\\r\\n        uint256 _totalSupply,\\r\\n        uint256 _reserveBalance,\\r\\n        uint256 _currentPrice,\\r\\n        uint256 _contractETHBalance,\\r\\n        uint256 _availableFees\\r\\n    ) {\\r\\n        _totalSupply = totalSupply();\\r\\n        _reserveBalance = reserveBalance;\\r\\n        _currentPrice = (_reserveBalance * SCALE) / _totalSupply;\\r\\n        _contractETHBalance = address(this).balance;\\r\\n        \\r\\n        // Available fees = contract balance - reserve balance\\r\\n        // If contract balance < reserve balance, no fees available (shouldn't happen)\\r\\n        _availableFees = _contractETHBalance > _reserveBalance ? \\r\\n                        _contractETHBalance - _reserveBalance : 0;\\r\\n    }\\r\\n\\r\\n    // ============ SECURITY FUNCTIONS ============\\r\\n\\r\\n    /**\\r\\n     * @dev Reject direct ETH transfers to contract\\r\\n     * Users must use buyTokens() function to purchase tokens\\r\\n     * Prevents accidental loss of ETH\\r\\n     */\\r\\n    receive() external payable {\\r\\n        revert(\\\"Use buyTokens() to purchase tokens\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reject calls to non-existent functions\\r\\n     * Prevents accidental ETH loss from incorrect function calls\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        revert(\\\"Use buyTokens() to purchase tokens\\\");\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6ff1cbb82c871452c29123a21b7abf3000d1bf2c3f6e64c379dec86171a6868d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526207a120600755606460095560c8600a5534801561002157600080fd5b50336040518060400160405280600381526020017f44455600000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4445560000000000000000000000000000000000000000000000000000000000815250816003908161009e9190610751565b5080600490816100ae9190610751565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101235760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161011a9190610864565b60405180910390fd5b6101328161018e60201b60201c565b50600160068190555061015430683635c9adc5dea0000061025460201b60201c565b670de0b6b3a764000066038d7ea4c68000683635c9adc5dea0000061017991906108ae565b610183919061091f565b6008819055506109e5565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036102c65760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016102bd9190610864565b60405180910390fd5b6102d8600083836102dc60201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361032e5780600260008282546103229190610950565b92505081905550610401565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156103ba578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016103b193929190610993565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361044a5780600260008282540392505081905550610497565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516104f491906109ca565b60405180910390a3505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061058257607f821691505b6020821081036105955761059461053b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026105fd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826105c0565b61060786836105c0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061064e6106496106448461061f565b610629565b61061f565b9050919050565b6000819050919050565b61066883610633565b61067c61067482610655565b8484546105cd565b825550505050565b600090565b610691610684565b61069c81848461065f565b505050565b5b818110156106c0576106b5600082610689565b6001810190506106a2565b5050565b601f821115610705576106d68161059b565b6106df846105b0565b810160208510156106ee578190505b6107026106fa856105b0565b8301826106a1565b50505b505050565b600082821c905092915050565b60006107286000198460080261070a565b1980831691505092915050565b60006107418383610717565b9150826002028217905092915050565b61075a82610501565b67ffffffffffffffff8111156107735761077261050c565b5b61077d825461056a565b6107888282856106c4565b600060209050601f8311600181146107bb57600084156107a9578287015190505b6107b38582610735565b86555061081b565b601f1984166107c98661059b565b60005b828110156107f1578489015182556001820191506020850194506020810190506107cc565b8683101561080e578489015161080a601f891682610717565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061084e82610823565b9050919050565b61085e81610843565b82525050565b60006020820190506108796000830184610855565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108b98261061f565b91506108c48361061f565b92508282026108d28161061f565b915082820484148315176108e9576108e861087f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061092a8261061f565b91506109358361061f565b925082610945576109446108f0565b5b828204905092915050565b600061095b8261061f565b91506109668361061f565b925082820190508082111561097e5761097d61087f565b5b92915050565b61098d8161061f565b82525050565b60006060820190506109a86000830186610855565b6109b56020830185610984565b6109c26040830184610984565b949350505050565b60006020820190506109df6000830184610984565b92915050565b612775806109f46000396000f3fe6080604052600436106101f25760003560e01c806370a082311161010d578063a9059cbb116100a0578063dfe6b5d61161006f578063dfe6b5d61461074c578063eb91d37e1461077b578063eced5526146107a6578063f2fde38b146107d1578063f8b2cb4f146107fa57610232565b8063a9059cbb1461069d578063bc063e1a146106da578063d0febe4c14610705578063dd62ed3e1461070f57610232565b80638b4f3b2c116100dc5780638b4f3b2c146105f35780638da5cb5b1461061c57806395d89b4114610647578063a10954fe1461067257610232565b806370a082311461054b578063715018a61461058857806379cc67901461059f5780637c5e2795146105c857610232565b8063313ce56711610185578063470624021161015457806347062402146104a2578063476343ee146104cd57806369fcd4ac146104e45780636c11bcd31461052257610232565b8063313ce567146103e7578063322d21001461041257806342966c6814610450578063449a52f81461047957610232565b806318160ddd116101c157806318160ddd1461032957806323b872dd146103545780632b14ca56146103915780632ff2e9dc146103bc57610232565b806306fdde031461026d578063095ea7b3146102985780630b78f9c0146102d55780630c7d5cd8146102fe57610232565b36610232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022990611cd6565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026490611cd6565b60405180910390fd5b34801561027957600080fd5b50610282610837565b60405161028f9190611d75565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba9190611e30565b6108c9565b6040516102cc9190611e8b565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f79190611ea6565b6108ec565b005b34801561030a57600080fd5b50610313610992565b6040516103209190611ef5565b60405180910390f35b34801561033557600080fd5b5061033e610998565b60405161034b9190611ef5565b60405180910390f35b34801561036057600080fd5b5061037b60048036038101906103769190611f10565b6109a2565b6040516103889190611e8b565b60405180910390f35b34801561039d57600080fd5b506103a66109d1565b6040516103b39190611ef5565b60405180910390f35b3480156103c857600080fd5b506103d16109d7565b6040516103de9190611ef5565b60405180910390f35b3480156103f357600080fd5b506103fc6109e4565b6040516104099190611f7f565b60405180910390f35b34801561041e57600080fd5b5061043960048036038101906104349190611f9a565b6109ed565b604051610447929190611fc7565b60405180910390f35b34801561045c57600080fd5b5061047760048036038101906104729190611f9a565b610aa2565b005b34801561048557600080fd5b506104a0600480360381019061049b9190611e30565b610b6f565b005b3480156104ae57600080fd5b506104b7610b85565b6040516104c49190611ef5565b60405180910390f35b3480156104d957600080fd5b506104e2610b8b565b005b3480156104f057600080fd5b5061050b60048036038101906105069190611f9a565b610c70565b604051610519929190611fc7565b60405180910390f35b34801561052e57600080fd5b5061054960048036038101906105449190611f9a565b610cef565b005b34801561055757600080fd5b50610572600480360381019061056d9190611ff0565b610ef5565b60405161057f9190611ef5565b60405180910390f35b34801561059457600080fd5b5061059d610f3d565b005b3480156105ab57600080fd5b506105c660048036038101906105c19190611e30565b610f51565b005b3480156105d457600080fd5b506105dd610f71565b6040516105ea9190611ef5565b60405180910390f35b3480156105ff57600080fd5b5061061a60048036038101906106159190611f9a565b610f7c565b005b34801561062857600080fd5b50610631611021565b60405161063e919061202c565b60405180910390f35b34801561065357600080fd5b5061065c61104b565b6040516106699190611d75565b60405180910390f35b34801561067e57600080fd5b506106876110dd565b6040516106949190611ef5565b60405180910390f35b3480156106a957600080fd5b506106c460048036038101906106bf9190611e30565b6110e3565b6040516106d19190611e8b565b60405180910390f35b3480156106e657600080fd5b506106ef611106565b6040516106fc9190611ef5565b60405180910390f35b61070d61110c565b005b34801561071b57600080fd5b5061073660048036038101906107319190612047565b61123c565b6040516107439190611ef5565b60405180910390f35b34801561075857600080fd5b506107616112c3565b604051610772959493929190612087565b60405180910390f35b34801561078757600080fd5b50610790611322565b60405161079d9190611ef5565b60405180910390f35b3480156107b257600080fd5b506107bb61136f565b6040516107c89190611ef5565b60405180910390f35b3480156107dd57600080fd5b506107f860048036038101906107f39190611ff0565b61137b565b005b34801561080657600080fd5b50610821600480360381019061081c9190611ff0565b611401565b60405161082e9190611ef5565b60405180910390f35b60606003805461084690612109565b80601f016020809104026020016040519081016040528092919081815260200182805461087290612109565b80156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b5050505050905090565b6000806108d4611413565b90506108e181858561141b565b600191505092915050565b6108f461142d565b6103e8821115801561090857506103e88111155b610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e90612186565b60405180910390fd5b8160098190555080600a819055507f5c6323bf1c2d7aaea2c091a4751c1c87af7f2864650c336507a77d0557af37a18282604051610986929190611fc7565b60405180910390a15050565b60075481565b6000600254905090565b6000806109ad611413565b90506109ba8582856114b4565b6109c5858585611549565b60019150509392505050565b600a5481565b683635c9adc5dea0000081565b60006012905090565b60008060008303610a045760008091509150610a9d565b61271060095484610a1591906121d5565b610a1f9190612246565b905060008184610a2f9190612277565b90506000610a3b610998565b03610a6e5766038d7ea4c68000670de0b6b3a764000082610a5c91906121d5565b610a669190612246565b925050610a9d565b80600854610a7c91906122ab565b610a84610998565b82610a8f91906121d5565b610a999190612246565b9250505b915091565b60008111610ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adc9061232b565b60405180910390fd5b60006064600283610af691906121d5565b610b009190612246565b9050808211610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b90612397565b60405180910390fd5b610b5633610b50611021565b83611549565b610b6b338284610b669190612277565b61163d565b5050565b610b7761142d565b610b8182826116bf565b5050565b60095481565b610b9361142d565b600060085447610ba39190612277565b905060008111610be8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdf90612403565b60405180910390fd5b610bf0611021565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c35573d6000803e3d6000fd5b507f4a0b7a8843b377b271b25fd3ba77a78e2c59ce4efbd6db7c0bbe803511472b1881604051610c659190611ef5565b60405180910390a150565b6000806000831480610c885750610c85610998565b83115b15610c995760008091509150610cea565b6000610ca3610998565b60085485610cb191906121d5565b610cbb9190612246565b9050612710600a5482610cce91906121d5565b610cd89190612246565b91508181610ce69190612277565b9250505b915091565b610cf7611741565b60008111610d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d319061232b565b60405180910390fd5b80610d4433610ef5565b1015610d85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7c9061246f565b60405180910390fd5b600080610d9183610c70565b9150915060008211610dd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcf906124db565b60405180910390fd5b81471015610e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e129061256d565b60405180910390fd5b60008183610e2991906122ab565b90508060086000828254610e3d9190612277565b92505081905550610e4e338561163d565b3373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610e94573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f6db63bebf1e6540277744df32846ebdb98385b1a73f2d5de49b28348add63f50858585604051610edf9392919061258d565b60405180910390a2505050610ef2611787565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f4561142d565b610f4f6000611791565b565b610f6382610f5d611413565b836114b4565b610f6d828261163d565b5050565b66038d7ea4c6800081565b610f8461142d565b600081118015610f975750620f42408111155b610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90612610565b60405180910390fd5b60006007549050816007819055507f5fc202872c5a7cd0b4e57b020c5f9b016b85ab3ca29cfb204fe46a9e3f391a878183604051611015929190611fc7565b60405180910390a15050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461105a90612109565b80601f016020809104026020016040519081016040528092919081815260200182805461108690612109565b80156110d35780601f106110a8576101008083540402835291602001916110d3565b820191906000526020600020905b8154815290600101906020018083116110b657829003601f168201915b5050505050905090565b60085481565b6000806110ee611413565b90506110fb818585611549565b600191505092915050565b6103e881565b611114611741565b60003411611157576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114e9061267c565b60405180910390fd5b600080611163346109ed565b91509150600082116111aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a1906126e8565b60405180910390fd5b600081346111b89190612277565b905080600860008282546111cc91906122ab565b925050819055506111dd33846116bf565b3373ffffffffffffffffffffffffffffffffffffffff167f0d1a0d5e3d583a0e92588799dd06e50fd78c07daf05f0cc06d7b848b1ca445f13485856040516112279392919061258d565b60405180910390a250505061123a611787565b565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008060008060006112d3610998565b9450600854935084670de0b6b3a7640000856112ef91906121d5565b6112f99190612246565b925047915083821161130c576000611319565b83826113189190612277565b5b90509091929394565b60008061132d610998565b036113415766038d7ea4c68000905061136c565b611349610998565b670de0b6b3a764000060085461135f91906121d5565b6113699190612246565b90505b90565b670de0b6b3a764000081565b61138361142d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113f55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016113ec919061202c565b60405180910390fd5b6113fe81611791565b50565b600061140c82610ef5565b9050919050565b600033905090565b6114288383836001611857565b505050565b611435611413565b73ffffffffffffffffffffffffffffffffffffffff16611453611021565b73ffffffffffffffffffffffffffffffffffffffff16146114b257611476611413565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114a9919061202c565b60405180910390fd5b565b60006114c0848461123c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156115435781811015611533578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161152a93929190612708565b60405180910390fd5b61154284848484036000611857565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115bb5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016115b2919061202c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361162d5760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401611624919061202c565b60405180910390fd5b611638838383611a2e565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116af5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016116a6919061202c565b60405180910390fd5b6116bb82600083611a2e565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117315760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401611728919061202c565b60405180910390fd5b61173d60008383611a2e565b5050565b60026006540361177d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b6001600681905550565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036118c95760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016118c0919061202c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361193b5760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401611932919061202c565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015611a28578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611a1f9190611ef5565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a80578060026000828254611a7491906122ab565b92505081905550611b53565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611b0c578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401611b0393929190612708565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611b9c5780600260008282540392505081905550611be9565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611c469190611ef5565b60405180910390a3505050565b600082825260208201905092915050565b7f55736520627579546f6b656e73282920746f20707572636861736520746f6b6560008201527f6e73000000000000000000000000000000000000000000000000000000000000602082015250565b6000611cc0602283611c53565b9150611ccb82611c64565b604082019050919050565b60006020820190508181036000830152611cef81611cb3565b9050919050565b600081519050919050565b60005b83811015611d1f578082015181840152602081019050611d04565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d4782611cf6565b611d518185611c53565b9350611d61818560208601611d01565b611d6a81611d2b565b840191505092915050565b60006020820190508181036000830152611d8f8184611d3c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dc782611d9c565b9050919050565b611dd781611dbc565b8114611de257600080fd5b50565b600081359050611df481611dce565b92915050565b6000819050919050565b611e0d81611dfa565b8114611e1857600080fd5b50565b600081359050611e2a81611e04565b92915050565b60008060408385031215611e4757611e46611d97565b5b6000611e5585828601611de5565b9250506020611e6685828601611e1b565b9150509250929050565b60008115159050919050565b611e8581611e70565b82525050565b6000602082019050611ea06000830184611e7c565b92915050565b60008060408385031215611ebd57611ebc611d97565b5b6000611ecb85828601611e1b565b9250506020611edc85828601611e1b565b9150509250929050565b611eef81611dfa565b82525050565b6000602082019050611f0a6000830184611ee6565b92915050565b600080600060608486031215611f2957611f28611d97565b5b6000611f3786828701611de5565b9350506020611f4886828701611de5565b9250506040611f5986828701611e1b565b9150509250925092565b600060ff82169050919050565b611f7981611f63565b82525050565b6000602082019050611f946000830184611f70565b92915050565b600060208284031215611fb057611faf611d97565b5b6000611fbe84828501611e1b565b91505092915050565b6000604082019050611fdc6000830185611ee6565b611fe96020830184611ee6565b9392505050565b60006020828403121561200657612005611d97565b5b600061201484828501611de5565b91505092915050565b61202681611dbc565b82525050565b6000602082019050612041600083018461201d565b92915050565b6000806040838503121561205e5761205d611d97565b5b600061206c85828601611de5565b925050602061207d85828601611de5565b9150509250929050565b600060a08201905061209c6000830188611ee6565b6120a96020830187611ee6565b6120b66040830186611ee6565b6120c36060830185611ee6565b6120d06080830184611ee6565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061212157607f821691505b602082108103612134576121336120da565b5b50919050565b7f46656520746f6f20686967680000000000000000000000000000000000000000600082015250565b6000612170600c83611c53565b915061217b8261213a565b602082019050919050565b6000602082019050818103600083015261219f81612163565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121e082611dfa565b91506121eb83611dfa565b92508282026121f981611dfa565b915082820484148315176122105761220f6121a6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061225182611dfa565b915061225c83611dfa565b92508261226c5761226b612217565b5b828204905092915050565b600061228282611dfa565b915061228d83611dfa565b92508282039050818111156122a5576122a46121a6565b5b92915050565b60006122b682611dfa565b91506122c183611dfa565b92508282019050808211156122d9576122d86121a6565b5b92915050565b7f416d6f756e74206d757374206265203e20300000000000000000000000000000600082015250565b6000612315601283611c53565b9150612320826122df565b602082019050919050565b6000602082019050818103600083015261234481612308565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2066656500600082015250565b6000612381601f83611c53565b915061238c8261234b565b602082019050919050565b600060208201905081810360008301526123b081612374565b9050919050565b7f4e6f206665657320746f20776974686472617700000000000000000000000000600082015250565b60006123ed601383611c53565b91506123f8826123b7565b602082019050919050565b6000602082019050818103600083015261241c816123e0565b9050919050565b7f496e73756666696369656e7420746f6b656e2062616c616e6365000000000000600082015250565b6000612459601a83611c53565b915061246482612423565b602082019050919050565b600060208201905081810360008301526124888161244c565b9050919050565b7f4e6f2045544820746f2072657475726e00000000000000000000000000000000600082015250565b60006124c5601083611c53565b91506124d08261248f565b602082019050919050565b600060208201905081810360008301526124f4816124b8565b9050919050565b7f496e73756666696369656e7420636f6e7472616374204554482062616c616e6360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000612557602183611c53565b9150612562826124fb565b604082019050919050565b600060208201905081810360008301526125868161254a565b9050919050565b60006060820190506125a26000830186611ee6565b6125af6020830185611ee6565b6125bc6040830184611ee6565b949350505050565b7f496e76616c6964207265736572766520726174696f0000000000000000000000600082015250565b60006125fa601583611c53565b9150612605826125c4565b602082019050919050565b60006020820190508181036000830152612629816125ed565b9050919050565b7f53656e642045544820746f2062757920746f6b656e7300000000000000000000600082015250565b6000612666601683611c53565b915061267182612630565b602082019050919050565b6000602082019050818103600083015261269581612659565b9050919050565b7f496e73756666696369656e742045544820666f72207075726368617365000000600082015250565b60006126d2601d83611c53565b91506126dd8261269c565b602082019050919050565b60006020820190508181036000830152612701816126c5565b9050919050565b600060608201905061271d600083018661201d565b61272a6020830185611ee6565b6127376040830184611ee6565b94935050505056fea2646970667358221220fe6d3e2f7ec68e1db2827c14cc07c3a01d2998b7052f59195a850d332148cefe64736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106101f25760003560e01c806370a082311161010d578063a9059cbb116100a0578063dfe6b5d61161006f578063dfe6b5d61461074c578063eb91d37e1461077b578063eced5526146107a6578063f2fde38b146107d1578063f8b2cb4f146107fa57610232565b8063a9059cbb1461069d578063bc063e1a146106da578063d0febe4c14610705578063dd62ed3e1461070f57610232565b80638b4f3b2c116100dc5780638b4f3b2c146105f35780638da5cb5b1461061c57806395d89b4114610647578063a10954fe1461067257610232565b806370a082311461054b578063715018a61461058857806379cc67901461059f5780637c5e2795146105c857610232565b8063313ce56711610185578063470624021161015457806347062402146104a2578063476343ee146104cd57806369fcd4ac146104e45780636c11bcd31461052257610232565b8063313ce567146103e7578063322d21001461041257806342966c6814610450578063449a52f81461047957610232565b806318160ddd116101c157806318160ddd1461032957806323b872dd146103545780632b14ca56146103915780632ff2e9dc146103bc57610232565b806306fdde031461026d578063095ea7b3146102985780630b78f9c0146102d55780630c7d5cd8146102fe57610232565b36610232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022990611cd6565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026490611cd6565b60405180910390fd5b34801561027957600080fd5b50610282610837565b60405161028f9190611d75565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba9190611e30565b6108c9565b6040516102cc9190611e8b565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f79190611ea6565b6108ec565b005b34801561030a57600080fd5b50610313610992565b6040516103209190611ef5565b60405180910390f35b34801561033557600080fd5b5061033e610998565b60405161034b9190611ef5565b60405180910390f35b34801561036057600080fd5b5061037b60048036038101906103769190611f10565b6109a2565b6040516103889190611e8b565b60405180910390f35b34801561039d57600080fd5b506103a66109d1565b6040516103b39190611ef5565b60405180910390f35b3480156103c857600080fd5b506103d16109d7565b6040516103de9190611ef5565b60405180910390f35b3480156103f357600080fd5b506103fc6109e4565b6040516104099190611f7f565b60405180910390f35b34801561041e57600080fd5b5061043960048036038101906104349190611f9a565b6109ed565b604051610447929190611fc7565b60405180910390f35b34801561045c57600080fd5b5061047760048036038101906104729190611f9a565b610aa2565b005b34801561048557600080fd5b506104a0600480360381019061049b9190611e30565b610b6f565b005b3480156104ae57600080fd5b506104b7610b85565b6040516104c49190611ef5565b60405180910390f35b3480156104d957600080fd5b506104e2610b8b565b005b3480156104f057600080fd5b5061050b60048036038101906105069190611f9a565b610c70565b604051610519929190611fc7565b60405180910390f35b34801561052e57600080fd5b5061054960048036038101906105449190611f9a565b610cef565b005b34801561055757600080fd5b50610572600480360381019061056d9190611ff0565b610ef5565b60405161057f9190611ef5565b60405180910390f35b34801561059457600080fd5b5061059d610f3d565b005b3480156105ab57600080fd5b506105c660048036038101906105c19190611e30565b610f51565b005b3480156105d457600080fd5b506105dd610f71565b6040516105ea9190611ef5565b60405180910390f35b3480156105ff57600080fd5b5061061a60048036038101906106159190611f9a565b610f7c565b005b34801561062857600080fd5b50610631611021565b60405161063e919061202c565b60405180910390f35b34801561065357600080fd5b5061065c61104b565b6040516106699190611d75565b60405180910390f35b34801561067e57600080fd5b506106876110dd565b6040516106949190611ef5565b60405180910390f35b3480156106a957600080fd5b506106c460048036038101906106bf9190611e30565b6110e3565b6040516106d19190611e8b565b60405180910390f35b3480156106e657600080fd5b506106ef611106565b6040516106fc9190611ef5565b60405180910390f35b61070d61110c565b005b34801561071b57600080fd5b5061073660048036038101906107319190612047565b61123c565b6040516107439190611ef5565b60405180910390f35b34801561075857600080fd5b506107616112c3565b604051610772959493929190612087565b60405180910390f35b34801561078757600080fd5b50610790611322565b60405161079d9190611ef5565b60405180910390f35b3480156107b257600080fd5b506107bb61136f565b6040516107c89190611ef5565b60405180910390f35b3480156107dd57600080fd5b506107f860048036038101906107f39190611ff0565b61137b565b005b34801561080657600080fd5b50610821600480360381019061081c9190611ff0565b611401565b60405161082e9190611ef5565b60405180910390f35b60606003805461084690612109565b80601f016020809104026020016040519081016040528092919081815260200182805461087290612109565b80156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b5050505050905090565b6000806108d4611413565b90506108e181858561141b565b600191505092915050565b6108f461142d565b6103e8821115801561090857506103e88111155b610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e90612186565b60405180910390fd5b8160098190555080600a819055507f5c6323bf1c2d7aaea2c091a4751c1c87af7f2864650c336507a77d0557af37a18282604051610986929190611fc7565b60405180910390a15050565b60075481565b6000600254905090565b6000806109ad611413565b90506109ba8582856114b4565b6109c5858585611549565b60019150509392505050565b600a5481565b683635c9adc5dea0000081565b60006012905090565b60008060008303610a045760008091509150610a9d565b61271060095484610a1591906121d5565b610a1f9190612246565b905060008184610a2f9190612277565b90506000610a3b610998565b03610a6e5766038d7ea4c68000670de0b6b3a764000082610a5c91906121d5565b610a669190612246565b925050610a9d565b80600854610a7c91906122ab565b610a84610998565b82610a8f91906121d5565b610a999190612246565b9250505b915091565b60008111610ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adc9061232b565b60405180910390fd5b60006064600283610af691906121d5565b610b009190612246565b9050808211610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b90612397565b60405180910390fd5b610b5633610b50611021565b83611549565b610b6b338284610b669190612277565b61163d565b5050565b610b7761142d565b610b8182826116bf565b5050565b60095481565b610b9361142d565b600060085447610ba39190612277565b905060008111610be8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdf90612403565b60405180910390fd5b610bf0611021565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c35573d6000803e3d6000fd5b507f4a0b7a8843b377b271b25fd3ba77a78e2c59ce4efbd6db7c0bbe803511472b1881604051610c659190611ef5565b60405180910390a150565b6000806000831480610c885750610c85610998565b83115b15610c995760008091509150610cea565b6000610ca3610998565b60085485610cb191906121d5565b610cbb9190612246565b9050612710600a5482610cce91906121d5565b610cd89190612246565b91508181610ce69190612277565b9250505b915091565b610cf7611741565b60008111610d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d319061232b565b60405180910390fd5b80610d4433610ef5565b1015610d85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7c9061246f565b60405180910390fd5b600080610d9183610c70565b9150915060008211610dd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcf906124db565b60405180910390fd5b81471015610e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e129061256d565b60405180910390fd5b60008183610e2991906122ab565b90508060086000828254610e3d9190612277565b92505081905550610e4e338561163d565b3373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610e94573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f6db63bebf1e6540277744df32846ebdb98385b1a73f2d5de49b28348add63f50858585604051610edf9392919061258d565b60405180910390a2505050610ef2611787565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f4561142d565b610f4f6000611791565b565b610f6382610f5d611413565b836114b4565b610f6d828261163d565b5050565b66038d7ea4c6800081565b610f8461142d565b600081118015610f975750620f42408111155b610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90612610565b60405180910390fd5b60006007549050816007819055507f5fc202872c5a7cd0b4e57b020c5f9b016b85ab3ca29cfb204fe46a9e3f391a878183604051611015929190611fc7565b60405180910390a15050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461105a90612109565b80601f016020809104026020016040519081016040528092919081815260200182805461108690612109565b80156110d35780601f106110a8576101008083540402835291602001916110d3565b820191906000526020600020905b8154815290600101906020018083116110b657829003601f168201915b5050505050905090565b60085481565b6000806110ee611413565b90506110fb818585611549565b600191505092915050565b6103e881565b611114611741565b60003411611157576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114e9061267c565b60405180910390fd5b600080611163346109ed565b91509150600082116111aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a1906126e8565b60405180910390fd5b600081346111b89190612277565b905080600860008282546111cc91906122ab565b925050819055506111dd33846116bf565b3373ffffffffffffffffffffffffffffffffffffffff167f0d1a0d5e3d583a0e92588799dd06e50fd78c07daf05f0cc06d7b848b1ca445f13485856040516112279392919061258d565b60405180910390a250505061123a611787565b565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008060008060006112d3610998565b9450600854935084670de0b6b3a7640000856112ef91906121d5565b6112f99190612246565b925047915083821161130c576000611319565b83826113189190612277565b5b90509091929394565b60008061132d610998565b036113415766038d7ea4c68000905061136c565b611349610998565b670de0b6b3a764000060085461135f91906121d5565b6113699190612246565b90505b90565b670de0b6b3a764000081565b61138361142d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113f55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016113ec919061202c565b60405180910390fd5b6113fe81611791565b50565b600061140c82610ef5565b9050919050565b600033905090565b6114288383836001611857565b505050565b611435611413565b73ffffffffffffffffffffffffffffffffffffffff16611453611021565b73ffffffffffffffffffffffffffffffffffffffff16146114b257611476611413565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114a9919061202c565b60405180910390fd5b565b60006114c0848461123c565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156115435781811015611533578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161152a93929190612708565b60405180910390fd5b61154284848484036000611857565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115bb5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016115b2919061202c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361162d5760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401611624919061202c565b60405180910390fd5b611638838383611a2e565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116af5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016116a6919061202c565b60405180910390fd5b6116bb82600083611a2e565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117315760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401611728919061202c565b60405180910390fd5b61173d60008383611a2e565b5050565b60026006540361177d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600681905550565b6001600681905550565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036118c95760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016118c0919061202c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361193b5760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401611932919061202c565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015611a28578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611a1f9190611ef5565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a80578060026000828254611a7491906122ab565b92505081905550611b53565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611b0c578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401611b0393929190612708565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611b9c5780600260008282540392505081905550611be9565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611c469190611ef5565b60405180910390a3505050565b600082825260208201905092915050565b7f55736520627579546f6b656e73282920746f20707572636861736520746f6b6560008201527f6e73000000000000000000000000000000000000000000000000000000000000602082015250565b6000611cc0602283611c53565b9150611ccb82611c64565b604082019050919050565b60006020820190508181036000830152611cef81611cb3565b9050919050565b600081519050919050565b60005b83811015611d1f578082015181840152602081019050611d04565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d4782611cf6565b611d518185611c53565b9350611d61818560208601611d01565b611d6a81611d2b565b840191505092915050565b60006020820190508181036000830152611d8f8184611d3c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dc782611d9c565b9050919050565b611dd781611dbc565b8114611de257600080fd5b50565b600081359050611df481611dce565b92915050565b6000819050919050565b611e0d81611dfa565b8114611e1857600080fd5b50565b600081359050611e2a81611e04565b92915050565b60008060408385031215611e4757611e46611d97565b5b6000611e5585828601611de5565b9250506020611e6685828601611e1b565b9150509250929050565b60008115159050919050565b611e8581611e70565b82525050565b6000602082019050611ea06000830184611e7c565b92915050565b60008060408385031215611ebd57611ebc611d97565b5b6000611ecb85828601611e1b565b9250506020611edc85828601611e1b565b9150509250929050565b611eef81611dfa565b82525050565b6000602082019050611f0a6000830184611ee6565b92915050565b600080600060608486031215611f2957611f28611d97565b5b6000611f3786828701611de5565b9350506020611f4886828701611de5565b9250506040611f5986828701611e1b565b9150509250925092565b600060ff82169050919050565b611f7981611f63565b82525050565b6000602082019050611f946000830184611f70565b92915050565b600060208284031215611fb057611faf611d97565b5b6000611fbe84828501611e1b565b91505092915050565b6000604082019050611fdc6000830185611ee6565b611fe96020830184611ee6565b9392505050565b60006020828403121561200657612005611d97565b5b600061201484828501611de5565b91505092915050565b61202681611dbc565b82525050565b6000602082019050612041600083018461201d565b92915050565b6000806040838503121561205e5761205d611d97565b5b600061206c85828601611de5565b925050602061207d85828601611de5565b9150509250929050565b600060a08201905061209c6000830188611ee6565b6120a96020830187611ee6565b6120b66040830186611ee6565b6120c36060830185611ee6565b6120d06080830184611ee6565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061212157607f821691505b602082108103612134576121336120da565b5b50919050565b7f46656520746f6f20686967680000000000000000000000000000000000000000600082015250565b6000612170600c83611c53565b915061217b8261213a565b602082019050919050565b6000602082019050818103600083015261219f81612163565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121e082611dfa565b91506121eb83611dfa565b92508282026121f981611dfa565b915082820484148315176122105761220f6121a6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061225182611dfa565b915061225c83611dfa565b92508261226c5761226b612217565b5b828204905092915050565b600061228282611dfa565b915061228d83611dfa565b92508282039050818111156122a5576122a46121a6565b5b92915050565b60006122b682611dfa565b91506122c183611dfa565b92508282019050808211156122d9576122d86121a6565b5b92915050565b7f416d6f756e74206d757374206265203e20300000000000000000000000000000600082015250565b6000612315601283611c53565b9150612320826122df565b602082019050919050565b6000602082019050818103600083015261234481612308565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2066656500600082015250565b6000612381601f83611c53565b915061238c8261234b565b602082019050919050565b600060208201905081810360008301526123b081612374565b9050919050565b7f4e6f206665657320746f20776974686472617700000000000000000000000000600082015250565b60006123ed601383611c53565b91506123f8826123b7565b602082019050919050565b6000602082019050818103600083015261241c816123e0565b9050919050565b7f496e73756666696369656e7420746f6b656e2062616c616e6365000000000000600082015250565b6000612459601a83611c53565b915061246482612423565b602082019050919050565b600060208201905081810360008301526124888161244c565b9050919050565b7f4e6f2045544820746f2072657475726e00000000000000000000000000000000600082015250565b60006124c5601083611c53565b91506124d08261248f565b602082019050919050565b600060208201905081810360008301526124f4816124b8565b9050919050565b7f496e73756666696369656e7420636f6e7472616374204554482062616c616e6360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000612557602183611c53565b9150612562826124fb565b604082019050919050565b600060208201905081810360008301526125868161254a565b9050919050565b60006060820190506125a26000830186611ee6565b6125af6020830185611ee6565b6125bc6040830184611ee6565b949350505050565b7f496e76616c6964207265736572766520726174696f0000000000000000000000600082015250565b60006125fa601583611c53565b9150612605826125c4565b602082019050919050565b60006020820190508181036000830152612629816125ed565b9050919050565b7f53656e642045544820746f2062757920746f6b656e7300000000000000000000600082015250565b6000612666601683611c53565b915061267182612630565b602082019050919050565b6000602082019050818103600083015261269581612659565b9050919050565b7f496e73756666696369656e742045544820666f72207075726368617365000000600082015250565b60006126d2601d83611c53565b91506126dd8261269c565b602082019050919050565b60006020820190508181036000830152612701816126c5565b9050919050565b600060608201905061271d600083018661201d565b61272a6020830185611ee6565b6127376040830184611ee6565b94935050505056fea2646970667358221220fe6d3e2f7ec68e1db2827c14cc07c3a01d2998b7052f59195a850d332148cefe64736f6c634300081c0033",
  "devdoc": {
    "details": "ERC20 token with automated pricing through a bonding curve mechanism  Key Features: - Bonding curve pricing: Price increases with supply, decreases when tokens are sold - Continuous liquidity: Users can buy/sell directly with the contract - Reserve-backed: All tokens backed by ETH held in contract reserves - Fee mechanism: Configurable fees on buy/sell operations - Owner controls: Administrative functions for fee and parameter management",
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "FeesUpdated(uint256,uint256)": {
        "details": "Emitted when buy/sell fees are updated by owner",
        "params": {
          "newBuyFee": "New buy fee in basis points",
          "newSellFee": "New sell fee in basis points  "
        }
      },
      "ReserveFundsWithdrawn(uint256)": {
        "details": "Emitted when accumulated fees are withdrawn by owner",
        "params": {
          "amount": "Amount of ETH withdrawn"
        }
      },
      "ReserveRatioUpdated(uint256,uint256)": {
        "details": "Emitted when the reserve ratio is updated by owner",
        "params": {
          "newRatio": "New reserve ratio value",
          "oldRatio": "Previous reserve ratio value"
        }
      },
      "TokensPurchased(address,uint256,uint256,uint256)": {
        "details": "Emitted when tokens are purchased through the bonding curve",
        "params": {
          "buyer": "Address of the token purchaser",
          "ethSpent": "Total ETH sent by buyer (including fees)",
          "fee": "Fee amount deducted from the transaction",
          "tokensReceived": "Number of tokens minted to buyer"
        }
      },
      "TokensSold(address,uint256,uint256,uint256)": {
        "details": "Emitted when tokens are sold back to the contract",
        "params": {
          "ethReceived": "ETH amount received by seller (after fees)",
          "fee": "Fee amount deducted from the transaction",
          "seller": "Address of the token seller  ",
          "tokensSold": "Number of tokens burned in the sale"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "Returns the value of tokens owned by `account`."
      },
      "burn(uint256)": {
        "details": "Override the standard burn function to include a fee mechanism When users burn tokens directly, a 2% fee is transferred to owner This incentivizes using the sellTokens function instead ",
        "params": {
          "amount": "Number of tokens to burn"
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
      },
      "buyTokens()": {
        "details": "Buy tokens with ETH using the bonding curve ETH is sent with the transaction, tokens are minted to the buyer  Security features: - nonReentrant: Prevents reentrancy attacks - Input validation: Ensures positive ETH amount and sufficient return - State updates before external calls: Follows checks-effects-interactions pattern"
      },
      "calculatePurchaseReturn(uint256)": {
        "details": "Calculate how many tokens can be purchased with given ETH amount Uses simplified linear approximation for gas efficiency and safety ",
        "params": {
          "ethAmount": "Amount of ETH to spend on tokens (in wei)"
        },
        "returns": {
          "fee": "Fee amount that would be charged",
          "tokensOut": "Number of tokens that would be received"
        }
      },
      "calculateSaleReturn(uint256)": {
        "details": "Calculate how much ETH will be received for selling tokens ",
        "params": {
          "tokenAmount": "Number of tokens to sell"
        },
        "returns": {
          "ethOut": "Amount of ETH that would be received (after fees)",
          "fee": "Fee amount that would be charged"
        }
      },
      "constructor": {
        "details": "Initialize the contract with initial parameters Sets up the token with name \"DEV\", symbol \"DEV\" Mints initial supply to contract and establishes initial reserve balance"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "getBalance(address)": {
        "details": "Get token balance of an account (wrapper for compatibility)",
        "params": {
          "account": "Address to check balance for"
        },
        "returns": {
          "_0": "Token balance of the account"
        }
      },
      "getContractStats()": {
        "details": "Get comprehensive contract statistics Useful for frontend applications and monitoring ",
        "returns": {
          "_availableFees": "Fees available for withdrawal by owner",
          "_contractETHBalance": "Total ETH balance in contract",
          "_currentPrice": "Current price per token in wei",
          "_reserveBalance": "Current ETH reserve balance",
          "_totalSupply": "Current total token supply"
        }
      },
      "getCurrentPrice()": {
        "details": "Get current token price in ETH per token Price = reserveBalance ÷ totalSupply (scaled for precision) ",
        "returns": {
          "_0": "Current price in wei per token"
        }
      },
      "mintTo(address,uint256)": {
        "details": "Mint tokens directly to a recipient (bypasses bonding curve) Used for airdrops, rewards, or initial distribution Only callable by contract owner ",
        "params": {
          "amount": "Number of tokens to mint",
          "recipient": "Address to receive the minted tokens"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sellTokens(uint256)": {
        "details": "Sell tokens for ETH using the bonding curve Tokens are burned, ETH is transferred to the seller ",
        "params": {
          "tokenAmount": "Number of tokens to sell  Security features: - nonReentrant: Prevents reentrancy attacks   - Balance validation: Ensures seller has sufficient tokens - Liquidity check: Ensures contract has enough ETH - State updates before external calls"
        }
      },
      "setFees(uint256,uint256)": {
        "details": "Update buy and sell fee percentages Fees are capped at MAX_FEE to prevent abuse Only callable by contract owner ",
        "params": {
          "newBuyFee": "New buy fee in basis points (max 1000 = 10%)",
          "newSellFee": "New sell fee in basis points (max 1000 = 10%)"
        }
      },
      "setReserveRatio(uint256)": {
        "details": "Update the reserve ratio parameter Changes the steepness of the bonding curve Only callable by contract owner ",
        "params": {
          "newRatio": "New reserve ratio in parts per million (1-1000000)"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "Returns the value of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFees()": {
        "details": "Withdraw accumulated fees from the contract Calculates excess ETH (contract balance - reserve balance) and transfers to owner Only callable by contract owner  This function allows the owner to collect trading fees that have accumulated while preserving the reserve backing for all tokens"
      }
    },
    "stateVariables": {
      "INITIAL_PRICE": {
        "details": "Initial price per token in wei (0.001 ETH) Sets the starting point for the bonding curve"
      },
      "INITIAL_SUPPLY": {
        "details": "Initial token supply minted at contract creation Provides price stability and prevents division by zero in calculations"
      },
      "MAX_FEE": {
        "details": "Maximum allowed fee to prevent excessive fee setting 1000 basis points = 10% maximum fee limit"
      },
      "SCALE": {
        "details": "Scaling factor for precise calculations (10^18) Used to maintain precision in price calculations and avoid rounding errors"
      },
      "buyFee": {
        "details": "Fee charged on token purchases in basis points 100 = 1% fee on buy transactions"
      },
      "reserveBalance": {
        "details": "Current ETH reserve balance backing the tokens This is the actual ETH that backs token value (excluding fees) Updated on every buy/sell transaction"
      },
      "reserveRatio": {
        "details": "Reserve ratio in parts per million (PPM) 500000 = 50% - determines the steepness of the bonding curve Higher ratio = steeper curve (more price sensitive) Lower ratio = flatter curve (less price sensitive)"
      },
      "sellFee": {
        "details": "Fee charged on token sales in basis points   200 = 2% fee on sell transactions"
      }
    },
    "title": "DevToken - Bonding Curve Token Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 709,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 715,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 717,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 719,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 721,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 320,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1856,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1951,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "reserveRatio",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1954,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "reserveBalance",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1972,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "buyFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1976,
        "contract": "contracts/BondingCurveToken.sol:DevToken",
        "label": "sellFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}