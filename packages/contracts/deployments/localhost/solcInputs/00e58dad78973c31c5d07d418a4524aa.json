{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/ContriFlow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./PriceConverter.sol\";\n\ncontract ContriFlow is ReentrancyGuard {\n    using PriceConverter for AggregatorV3Interface;\n\n    event DepositAdded(address indexed ownerAddress, uint256 amountWei);\n    event DepositRemoved(address indexed ownerAddress, uint256 amountWei);\n    event VoucherStored(\n        address indexed ownerAddress,\n        uint256 indexed repoGithubId,\n        uint256 indexed contributorGithubId,\n        uint256 ownerGithubId,\n        uint256 prNumber,\n        uint256 dollarAmount8dec,\n        bytes32 hash\n    );\n\n    event RewardClaimed(\n        address indexed ownerAddress,\n        uint256 indexed repoGithubId,\n        uint256 indexed contrubutorGithubId,\n        uint256 ownerGithubId,\n        uint256 prNumber,\n        address contributor,\n        uint256 amountWei,\n        uint256 dollarAmount8dec\n    );\n\n    error NotOwner();\n    error InvalidBotSigner();\n    error InvalidPriceFeed();\n    error InvalidVoucher();\n    error VoucherExists();\n    error AlreadyClaimed();\n    error InsufficientBalance();\n    error TransferFailed();\n    error NotBotSigner();\n    error GithubIdNotSet();\n\n    struct RepoOwnerDetails {\n        uint256 githubId;\n        uint256 amount;\n    }\n\n    struct Voucher {\n        bytes32 hash;\n        uint256 contributorGithubId;\n        uint256 dollarAmount8dec; // USD amount scaled to 8 decimals (e.g. $50 => 50 * 1e8)\n        uint256 ethAmountInWei;\n        bool claimed;\n    }\n\n    mapping(address => RepoOwnerDetails) public ownerDetails;\n\n    address private bot;\n    address immutable i_owner;\n    AggregatorV3Interface public s_priceFeed;\n\n    modifier onlyBot() {\n        require(msg.sender == bot, \"Not owner\");\n        _;\n    }\n\n    // mapping (uint256 repoOwnerGithubId => mapping (uint256 repoId => mapping(uint256 prNumber =>  Voucher)) vouchersByRepoAndPr;\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => Voucher)))\n        public vouchersByRepoAndPr;\n\n    // repoOwnerGithubId -> repoId -> prNumber -> Voucher\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        if (priceFeedAddress == address(0)) revert InvalidPriceFeed();\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n        bot = msg.sender;\n    }\n\n    function setBotSigner(address newBot) external onlyBot {\n        bot = newBot;\n    }\n\n    /// @notice Owner deposits ETH to the contract\n    function addAmount(uint256 githubId) external payable {\n        require(msg.value > 0, \"Must send ETH\");\n        if (githubId == 0) revert GithubIdNotSet();\n\n        RepoOwnerDetails storage details = ownerDetails[msg.sender];\n\n        if (details.githubId == 0) {\n            details.githubId = githubId;\n        } else {\n            require(details.githubId == githubId, \"GitHub ID mismatch\");\n        }\n\n        details.amount += msg.value;\n        emit DepositAdded(msg.sender, msg.value);\n    }\n\n    /// @notice Owner withdraws unused ETH from a deposit\n    function removeAmount(uint256 amountWei) external {\n        uint256 bal = ownerDetails[msg.sender].amount;\n        if (bal < amountWei) revert InsufficientBalance();\n        ownerDetails[msg.sender].amount -= amountWei;\n        (bool success, ) = payable(msg.sender).call{value: amountWei}(\"\");\n        if (!success) revert TransferFailed();\n        emit DepositRemoved(msg.sender, amountWei);\n    }\n\n    function storeVoucher(\n        address ownerAddress,\n        uint256 ownerGithubId,\n        uint256 repoGithubId,\n        uint256 contributorGithubId,\n        uint256 prNumber,\n        uint256 dollarAmount8dec,\n        bytes32 hash\n    ) external onlyBot {\n        // Check GitHub ID was set on-chain for ownerAddress\n        uint256 recorded = ownerDetails[ownerAddress].githubId;\n        if (recorded == 0 || recorded != ownerGithubId) revert GithubIdNotSet();\n\n        if (vouchersByRepoAndPr[ownerGithubId][repoGithubId][prNumber].hash != bytes32(0)) revert VoucherExists();\n\n                // Compute ETH amount via Chainlink\n        uint256 ethAmt = PriceConverter.getEthAmountFromUsd(\n            dollarAmount8dec,\n            s_priceFeed\n        );\n        require(ethAmt > 0, \"Invalid ETH amount\");\n\n        // Store voucher\n        vouchersByRepoAndPr[ownerGithubId][repoGithubId][prNumber] = Voucher({\n            hash: hash,\n            contributorGithubId: contributorGithubId,\n            dollarAmount8dec: dollarAmount8dec,\n            claimed: false,\n            ethAmountInWei: ethAmt\n        });\n        emit VoucherStored(\n            ownerAddress,\n            repoGithubId,\n            contributorGithubId,\n            ownerGithubId,\n            prNumber,\n            dollarAmount8dec,\n            hash\n        );\n    }\n\n    function claimReward(\n        string calldata secret,\n        address ownerAddress,\n        uint256 ownerGithubId,\n        uint256 repoGithubId,\n        uint256 prNumber,\n        uint256 contributorGithubId,\n        uint256 dollarAmount8dec\n    ) external nonReentrant {\n        address contributor = msg.sender;\n\n        Voucher storage v = vouchersByRepoAndPr[ownerGithubId][repoGithubId][prNumber];\n\n        if(v.hash == bytes32(0)) { revert InvalidVoucher(); }\n        \n        // Recompute voucherId as was done off-chain\n        bytes32 calculatedHash = keccak256(\n            abi.encodePacked(\n                secret,\n                ownerAddress,\n                ownerGithubId,\n                repoGithubId,\n                prNumber,\n                contributorGithubId,\n                dollarAmount8dec\n            )\n        );\n\n        if (\n            v.hash != calculatedHash ||\n            v.contributorGithubId != contributorGithubId ||\n            v.dollarAmount8dec != dollarAmount8dec\n        ) {\n            revert InvalidVoucher();\n        }\n        if (v.claimed) revert AlreadyClaimed();\n\n        // Mark claimed\n        v.claimed = true;\n        uint256 ethAmt = v.ethAmountInWei;\n\n        // Deduct from owner's deposit for this repo\n        uint256 bal = ownerDetails[ownerAddress].amount;\n        if (bal < ethAmt) revert InsufficientBalance();\n        ownerDetails[ownerAddress].amount = bal - ethAmt;\n\n        // Transfer ETH to contributor\n        (bool sent, ) = payable(contributor).call{value: ethAmt}(\"\");\n        if (!sent) revert TransferFailed();\n\n        emit RewardClaimed(\n            ownerAddress,\n            repoGithubId,\n            contributorGithubId,\n            ownerGithubId,\n            prNumber,\n            contributor,\n            ethAmt,\n            dollarAmount8dec\n        );\n    }\n\n    function getOwnerDetails(address ownerAddress) view external returns (RepoOwnerDetails memory) {\n        return ownerDetails[ownerAddress];\n    }\n    \n    function getVoucherDetails(uint256 repoOwnerGithubId, uint256 repoId, uint256 prNumber) external view  returns (Voucher memory) {\n        return vouchersByRepoAndPr[repoOwnerGithubId][repoId][prNumber];\n    }\n\n    function getCurrentSigner() external view returns (address) {\n        return bot;\n    } \n\n    fallback() external payable {}\n\n    receive() external payable {}\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        // Chainlink returns price with 8 decimals, convert to 18 decimals (wei)\r\n        return uint256(answer) * 1e10;\r\n    }\r\n\r\n    /// @notice Converts USD amount (8 decimals) to ETH amount (in wei)\r\n    /// @param usdAmount The amount in USD (e.g., $50 = 50 * 1e8)\r\n    function getEthAmountFromUsd(\r\n        uint256 usdAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed); // ETH price in USD, 18 decimals\r\n        // USD has 8 decimals, so multiply by 1e18 to get wei, then divide by price\r\n        return (usdAmount * 1e18) / ethPrice;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}