// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    // output   = "@/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String       @id @default(cuid())
    name               String
    email              String       @unique
    github_id          String       @unique
    wallet_address     String?
    repositories       Repository[]
    sign_message_hash  String?
    installation_id    String?      @unique
    app_installed      Boolean      @default(false)
    app_uninstalled_at DateTime?
    suspended          Boolean?     @default(false)
    created_at         DateTime     @default(now())
    updated_at         DateTime     @updatedAt

    @@index([github_id])
    @@index([installation_id])
}

// NOTE: This bug will be solved in later phase. this should solve the issue of installing the github app before even signing in.
// model PendingInstallation {
//     id             String   @id @default(cuid())
//     githubUserId   String // from GitHub webhook
//     installationId Int      @unique
//     login          String
//     createdAt      DateTime @default(now())
// }

model Repository {
    id             String   @id @default(cuid())
    name           String
    github_repo_id String   @unique
    user_id         String
    user           User     @relation(fields: [user_id], references: [id])
    rewards        Reward[]
    created_at     DateTime @default(now())
    updated_at     DateTime @updatedAt
}

model Contributor {
    id             String   @id @default(cuid())
    github_id       String   @unique
    wallet_address String?
    email          String?  @unique
    rewards        Reward[]
    created_at     DateTime @default(now())
    updated_at     DateTime @updatedAt
}

model Reward {
    id String @id @default(cuid())

    // Voucher data
    owner_github_id       String
    contributor_github_id String
    repo_github_id        String
    pr_number             Int
    secret                String
    amount_usd            Float

    amount_eth     Float?
    contributor_id String
    contributor    Contributor @relation(fields: [contributor_id], references: [id])
    claimed        Boolean     @default(false)
    claimed_at     DateTime?

    created_at    DateTime    @default(now())
    updated_at    DateTime    @updatedAt
    repository    Repository? @relation(fields: [repository_id], references: [id])
    repository_id String?

    @@unique([owner_github_id, repo_github_id, pr_number])
}
