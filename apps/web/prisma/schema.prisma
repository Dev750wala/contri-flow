generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String                 @id @default(cuid())
  name           String
  email          String?                @unique
  github_id      String                 @unique @db.Citext
  wallet_address String?
  organization   Organization[]
  maintenances   RepositoryMaintainer[]
  contributor    Contributor?
  created_at     DateTime               @default(now())
  updated_at     DateTime               @updatedAt

  @@index([github_id])
}

model Organization {
  id                 String    @id @default(cuid())
  name               String
  github_org_id      String    @unique
  installation_id    String    @unique
  app_installed      Boolean   @default(false)
  app_uninstalled_at DateTime?
  suspended          Boolean   @default(false)

  owner_github_id String
  owner_id        String?
  owner           User?   @relation(fields: [owner_id], references: [id])

  repositories     Repository[]
  sync_maintainers Boolean      @default(false)
  // members            OrganizationMember[]
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt

  @@index([github_org_id])
  @@index([installation_id])
}

model Repository {
  id              String                 @id @default(cuid())
  name            String
  github_repo_id  String                 @unique
  organization_id String
  organization    Organization           @relation(fields: [organization_id], references: [id])
  maintainers     RepositoryMaintainer[]
  rewards         Reward[]
  is_removed      Boolean                @default(false)
  removed_at      DateTime?
  created_at      DateTime               @default(now())
  updated_at      DateTime               @updatedAt

  @@index([github_repo_id])
}

model RepositoryMaintainer {
  id             String         @id @default(cuid())
  repository     Repository     @relation(fields: [repository_id], references: [id])
  repository_id  String
  user           User?          @relation(fields: [user_id], references: [id])
  user_id        String?
  github_id      String
  role           RepositoryRole @default(MAINTAIN)
  issued_rewards Reward[]
  created_at     DateTime       @default(now())

  @@unique([repository_id, github_id])
}

model Contributor {
  id             String   @id @default(cuid())
  github_id      String   @unique
  wallet_address String?
  email          String?  @unique
  user_id        String?  @unique
  user           User?    @relation(fields: [user_id], references: [id])
  rewards        Reward[]
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Reward {
  id          String    @id @default(cuid())
  pr_number   Int
  secret      String
  tokenAmount String
  claimed     Boolean   @default(false)
  claimed_at  DateTime?

  contributor_id      String
  contributor         Contributor          @relation(fields: [contributor_id], references: [id])
  repository_id       String
  repository          Repository           @relation(fields: [repository_id], references: [id])
  issuer_id           String
  issuer              RepositoryMaintainer @relation(fields: [issuer_id], references: [id])
  tx_hash             String?
  comment             String
  destination_address String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([repository_id, pr_number])
}

enum RepositoryRole {
  ADMIN
  MAINTAIN
}
