// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String       @id @default(cuid())
    name          String
    email         String       @unique
    githubId      String       @unique
    walletAddress String?
    repositories  Repository[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model Repository {
    id           String   @id @default(cuid())
    name         String
    githubRepoId String   @unique
    userId       String
    user         User     @relation(fields: [userId], references: [id])
    rewards      Reward[]
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Contributor {
    id            String   @id @default(cuid())
    githubId      String   @unique
    username      String?
    walletAddress String?
    rewards       Reward[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Reward {
    id            String      @id @default(cuid())
    contributorId String
    contributor   Contributor @relation(fields: [contributorId], references: [id])
    repositoryId  String
    repository    Repository  @relation(fields: [repositoryId], references: [id])
    prNumber      Int
    amountUsd     Float
    amountEth     Float?
    claimed       Boolean     @default(false)
    claimedAt     DateTime?
    voucher       Voucher?    @relation(fields: [voucherId], references: [id])
    voucherId     String?     @unique
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model Voucher {
    id                  String   @id @default(cuid())
    secretHash          String // keccak256 hash of secret + metadata
    ownerGithubId       String
    repoGithubId        String
    prNumber            Int
    contributorGithubId String
    dollarAmount8dec    String // Keep as string to avoid float rounding issues
    claimed             Boolean  @default(false)
    reward              Reward?
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    @@unique([ownerGithubId, repoGithubId, prNumber])
}
