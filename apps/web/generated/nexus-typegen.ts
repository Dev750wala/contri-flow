/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphql/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  OrganizationRole: "MEMBER" | "OWNER"
  RepositoryRole: "ADMIN" | "MAINTAIN"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  CheckInstallationData: { // root type
    organization?: NexusGenRootTypes['Organization'] | null; // Organization
    repositories: NexusGenRootTypes['Repository'][]; // [Repository!]!
    type?: string | null; // String
  }
  CheckInstallationResponse: { // root type
    data?: NexusGenRootTypes['CheckInstallationData'] | null; // CheckInstallationData
    error?: string | null; // String
    success: boolean; // Boolean!
  }
  Contributor: { // root type
    created_at: NexusGenScalars['DateTime']; // DateTime!
    email?: string | null; // String
    github_id: string; // String!
    id: string; // ID!
    updated_at: NexusGenScalars['DateTime']; // DateTime!
    wallet_address?: string | null; // String
  }
  Mutation: {};
  Organization: { // root type
    app_installed: boolean; // Boolean!
    app_uninstalled_at?: NexusGenScalars['DateTime'] | null; // DateTime
    created_at: NexusGenScalars['DateTime']; // DateTime!
    github_org_id: string; // String!
    id: string; // ID!
    installation_id: string; // String!
    name: string; // String!
    owner_github_id: string; // String!
    suspended: boolean; // Boolean!
    sync_maintainers: boolean; // Boolean!
    updated_at: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  Repository: { // root type
    created_at: NexusGenScalars['DateTime']; // DateTime!
    enabled_rewards: boolean; // Boolean!
    github_repo_id: string; // String!
    id: string; // ID!
    is_removed: boolean; // Boolean!
    name: string; // String!
    removed_at?: NexusGenScalars['DateTime'] | null; // DateTime
    updated_at: NexusGenScalars['DateTime']; // DateTime!
  }
  RepositoryMaintainer: { // root type
    created_at: NexusGenScalars['DateTime']; // DateTime!
    github_id: string; // String!
    id: string; // ID!
    role: NexusGenEnums['RepositoryRole']; // RepositoryRole!
  }
  Reward: { // root type
    claimed: boolean; // Boolean!
    claimed_at?: NexusGenScalars['DateTime'] | null; // DateTime
    comment: string; // String!
    created_at: NexusGenScalars['DateTime']; // DateTime!
    destination_address?: string | null; // String
    id: string; // ID!
    pr_number: number; // Int!
    secret: string; // String!
    tx_hash?: string | null; // String
    updated_at: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // root type
    created_at: NexusGenScalars['DateTime']; // DateTime!
    email?: string | null; // String
    github_id: string; // String!
    id: string; // ID!
    name: string; // String!
    updated_at: NexusGenScalars['DateTime']; // DateTime!
    wallet_address?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  CheckInstallationData: { // field return type
    organization: NexusGenRootTypes['Organization'] | null; // Organization
    repositories: NexusGenRootTypes['Repository'][]; // [Repository!]!
    type: string | null; // String
  }
  CheckInstallationResponse: { // field return type
    data: NexusGenRootTypes['CheckInstallationData'] | null; // CheckInstallationData
    error: string | null; // String
    success: boolean; // Boolean!
  }
  Contributor: { // field return type
    created_at: NexusGenScalars['DateTime']; // DateTime!
    email: string | null; // String
    github_id: string; // String!
    id: string; // ID!
    rewards: Array<NexusGenRootTypes['Reward'] | null> | null; // [Reward]
    updated_at: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    wallet_address: string | null; // String
  }
  Mutation: { // field return type
    addRepositoryMaintainer: NexusGenRootTypes['RepositoryMaintainer']; // RepositoryMaintainer!
    claimReward: NexusGenRootTypes['Reward'] | null; // Reward
    enableSyncMaintainers: NexusGenRootTypes['Organization'] | null; // Organization
    linkContributorToUser: NexusGenRootTypes['Contributor'] | null; // Contributor
    removeRepositoryMaintainer: boolean | null; // Boolean
  }
  Organization: { // field return type
    app_installed: boolean; // Boolean!
    app_uninstalled_at: NexusGenScalars['DateTime'] | null; // DateTime
    created_at: NexusGenScalars['DateTime']; // DateTime!
    github_org_id: string; // String!
    id: string; // ID!
    installation_id: string; // String!
    name: string; // String!
    owner: NexusGenRootTypes['User']; // User!
    owner_github_id: string; // String!
    repositories: Array<NexusGenRootTypes['Repository'] | null> | null; // [Repository]
    suspended: boolean; // Boolean!
    sync_maintainers: boolean; // Boolean!
    updated_at: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: { // field return type
    allRepositories: Array<NexusGenRootTypes['Repository'] | null> | null; // [Repository]
    allUsers: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    checkInstallation: NexusGenRootTypes['CheckInstallationResponse'] | null; // CheckInstallationResponse
    contributor: NexusGenRootTypes['Contributor'] | null; // Contributor
    contributorByGithubId: NexusGenRootTypes['Contributor'] | null; // Contributor
    listOrganizationsForOwner: Array<NexusGenRootTypes['Organization'] | null> | null; // [Organization]
    me: NexusGenRootTypes['User'] | null; // User
    organization: NexusGenRootTypes['Organization'] | null; // Organization
    organizationByGithubId: NexusGenRootTypes['Organization'] | null; // Organization
    organizations: Array<NexusGenRootTypes['Organization'] | null> | null; // [Organization]
    repositoriesByOrganizationId: Array<NexusGenRootTypes['Repository'] | null> | null; // [Repository]
    repository: NexusGenRootTypes['Repository'] | null; // Repository
    repositoryByGithubRepoId: NexusGenRootTypes['Repository'] | null; // Repository
    repositoryMaintainers: NexusGenRootTypes['RepositoryMaintainer'][]; // [RepositoryMaintainer!]!
    reward: NexusGenRootTypes['Reward'] | null; // Reward
    rewardsByContributor: NexusGenRootTypes['Reward'][]; // [Reward!]!
    rewardsByRepository: NexusGenRootTypes['Reward'][]; // [Reward!]!
    user: NexusGenRootTypes['User'] | null; // User
    userByEmail: NexusGenRootTypes['User'] | null; // User
    userByGithubId: NexusGenRootTypes['User'] | null; // User
  }
  Repository: { // field return type
    created_at: NexusGenScalars['DateTime']; // DateTime!
    enabled_rewards: boolean; // Boolean!
    github_repo_id: string; // String!
    id: string; // ID!
    is_removed: boolean; // Boolean!
    maintainers: NexusGenRootTypes['RepositoryMaintainer'][]; // [RepositoryMaintainer!]!
    name: string; // String!
    organization: NexusGenRootTypes['Organization'] | null; // Organization
    removed_at: NexusGenScalars['DateTime'] | null; // DateTime
    rewards: Array<NexusGenRootTypes['Reward'] | null> | null; // [Reward]
    updated_at: NexusGenScalars['DateTime']; // DateTime!
  }
  RepositoryMaintainer: { // field return type
    created_at: NexusGenScalars['DateTime']; // DateTime!
    github_id: string; // String!
    id: string; // ID!
    issued_rewards: Array<NexusGenRootTypes['Reward'] | null> | null; // [Reward]
    repository: NexusGenRootTypes['Repository']; // Repository!
    role: NexusGenEnums['RepositoryRole']; // RepositoryRole!
    user: NexusGenRootTypes['User'] | null; // User
  }
  Reward: { // field return type
    claimed: boolean; // Boolean!
    claimed_at: NexusGenScalars['DateTime'] | null; // DateTime
    comment: string; // String!
    contributor: NexusGenRootTypes['Contributor'] | null; // Contributor
    created_at: NexusGenScalars['DateTime']; // DateTime!
    destination_address: string | null; // String
    id: string; // ID!
    issuer: NexusGenRootTypes['RepositoryMaintainer']; // RepositoryMaintainer!
    pr_number: number; // Int!
    repository: NexusGenRootTypes['Repository'] | null; // Repository
    secret: string; // String!
    tx_hash: string | null; // String
    updated_at: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // field return type
    contributor: Array<NexusGenRootTypes['Contributor'] | null> | null; // [Contributor]
    created_at: NexusGenScalars['DateTime']; // DateTime!
    email: string | null; // String
    github_id: string; // String!
    id: string; // ID!
    maintenances: Array<NexusGenRootTypes['RepositoryMaintainer'] | null> | null; // [RepositoryMaintainer]
    name: string; // String!
    organizations: Array<NexusGenRootTypes['Organization'] | null> | null; // [Organization]
    updated_at: NexusGenScalars['DateTime']; // DateTime!
    wallet_address: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  CheckInstallationData: { // field return type name
    organization: 'Organization'
    repositories: 'Repository'
    type: 'String'
  }
  CheckInstallationResponse: { // field return type name
    data: 'CheckInstallationData'
    error: 'String'
    success: 'Boolean'
  }
  Contributor: { // field return type name
    created_at: 'DateTime'
    email: 'String'
    github_id: 'String'
    id: 'ID'
    rewards: 'Reward'
    updated_at: 'DateTime'
    user: 'User'
    wallet_address: 'String'
  }
  Mutation: { // field return type name
    addRepositoryMaintainer: 'RepositoryMaintainer'
    claimReward: 'Reward'
    enableSyncMaintainers: 'Organization'
    linkContributorToUser: 'Contributor'
    removeRepositoryMaintainer: 'Boolean'
  }
  Organization: { // field return type name
    app_installed: 'Boolean'
    app_uninstalled_at: 'DateTime'
    created_at: 'DateTime'
    github_org_id: 'String'
    id: 'ID'
    installation_id: 'String'
    name: 'String'
    owner: 'User'
    owner_github_id: 'String'
    repositories: 'Repository'
    suspended: 'Boolean'
    sync_maintainers: 'Boolean'
    updated_at: 'DateTime'
  }
  Query: { // field return type name
    allRepositories: 'Repository'
    allUsers: 'User'
    checkInstallation: 'CheckInstallationResponse'
    contributor: 'Contributor'
    contributorByGithubId: 'Contributor'
    listOrganizationsForOwner: 'Organization'
    me: 'User'
    organization: 'Organization'
    organizationByGithubId: 'Organization'
    organizations: 'Organization'
    repositoriesByOrganizationId: 'Repository'
    repository: 'Repository'
    repositoryByGithubRepoId: 'Repository'
    repositoryMaintainers: 'RepositoryMaintainer'
    reward: 'Reward'
    rewardsByContributor: 'Reward'
    rewardsByRepository: 'Reward'
    user: 'User'
    userByEmail: 'User'
    userByGithubId: 'User'
  }
  Repository: { // field return type name
    created_at: 'DateTime'
    enabled_rewards: 'Boolean'
    github_repo_id: 'String'
    id: 'ID'
    is_removed: 'Boolean'
    maintainers: 'RepositoryMaintainer'
    name: 'String'
    organization: 'Organization'
    removed_at: 'DateTime'
    rewards: 'Reward'
    updated_at: 'DateTime'
  }
  RepositoryMaintainer: { // field return type name
    created_at: 'DateTime'
    github_id: 'String'
    id: 'ID'
    issued_rewards: 'Reward'
    repository: 'Repository'
    role: 'RepositoryRole'
    user: 'User'
  }
  Reward: { // field return type name
    claimed: 'Boolean'
    claimed_at: 'DateTime'
    comment: 'String'
    contributor: 'Contributor'
    created_at: 'DateTime'
    destination_address: 'String'
    id: 'ID'
    issuer: 'RepositoryMaintainer'
    pr_number: 'Int'
    repository: 'Repository'
    secret: 'String'
    tx_hash: 'String'
    updated_at: 'DateTime'
  }
  User: { // field return type name
    contributor: 'Contributor'
    created_at: 'DateTime'
    email: 'String'
    github_id: 'String'
    id: 'ID'
    maintenances: 'RepositoryMaintainer'
    name: 'String'
    organizations: 'Organization'
    updated_at: 'DateTime'
    wallet_address: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addRepositoryMaintainer: { // args
      github_id: string; // String!
      repositoryId: string; // String!
      role: NexusGenEnums['RepositoryRole']; // RepositoryRole!
      userId: string; // String!
    }
    claimReward: { // args
      id: string; // String!
    }
    enableSyncMaintainers: { // args
      organizationId: string; // String!
    }
    linkContributorToUser: { // args
      github_id: string; // String!
      userId: string; // String!
    }
    removeRepositoryMaintainer: { // args
      id: string; // String!
    }
  }
  Query: {
    allRepositories: { // args
      token: string; // String!
    }
    allUsers: { // args
      token: string; // String!
    }
    checkInstallation: { // args
      installationId: string; // String!
    }
    contributor: { // args
      id: string; // String!
    }
    contributorByGithubId: { // args
      github_id: string; // String!
    }
    organization: { // args
      id: string; // String!
    }
    organizationByGithubId: { // args
      githubOrgId: string; // String!
    }
    repositoriesByOrganizationId: { // args
      organizationId: string; // String!
    }
    repository: { // args
      id: string; // String!
    }
    repositoryByGithubRepoId: { // args
      githubRepoId: string; // String!
    }
    repositoryMaintainers: { // args
      repositoryId: string; // String!
    }
    reward: { // args
      id: string; // String!
    }
    rewardsByContributor: { // args
      contributorGithubId: string; // String!
    }
    rewardsByRepository: { // args
      repoGithubId: string; // String!
    }
    user: { // args
      id: string; // String!
    }
    userByEmail: { // args
      email: string; // String!
    }
    userByGithubId: { // args
      github_id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}