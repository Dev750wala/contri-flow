### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Contributor {
  created_at: DateTime!
  email: String
  github_id: String!
  id: ID!
  rewards: [Reward]
  updated_at: DateTime!
  user: User
  wallet_address: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  addRepositoryMaintainer(github_id: String!, repositoryId: String!, role: RepositoryRole!, userId: String!): RepositoryMaintainer!
  claimReward(id: String!): Reward
  enableSyncMaintainers(organizationId: String!): Organization
  linkContributorToUser(github_id: String!, userId: String!): Contributor
  removeRepositoryMaintainer(id: String!): Boolean
}

type Organization {
  app_installed: Boolean!
  app_uninstalled_at: DateTime
  created_at: DateTime!
  github_org_id: String!
  id: ID!
  installation_id: String!
  name: String!
  owner: User!
  owner_github_id: String!
  repositories: [Repository]
  suspended: Boolean!
  sync_maintainers: Boolean!
  updated_at: DateTime!
}

enum OrganizationRole {
  MEMBER
  OWNER
}

type Query {
  allRepositories(token: String!): [Repository]
  allUsers(token: String!): [User]
  contributor(id: String!): Contributor
  contributorByGithubId(github_id: String!): Contributor
  listOrganizationsForOwner: [Organization]
  me: User
  organization(id: String!): Organization
  organizationByGithubId(githubOrgId: String!): Organization
  organizations: [Organization]
  repositoriesByOrganizationId(organizationId: String!): [Repository]
  repository(id: String!): Repository
  repositoryByGithubRepoId(githubRepoId: String!): Repository
  repositoryMaintainers(repositoryId: String!): [RepositoryMaintainer!]!
  reward(id: String!): Reward
  rewardsByContributor(contributorGithubId: String!): [Reward!]!
  rewardsByRepository(repoGithubId: String!): [Reward!]!
  user(id: String!): User
  userByEmail(email: String!): User
  userByGithubId(github_id: String!): User
}

type Repository {
  created_at: DateTime!
  github_repo_id: String!
  id: ID!
  is_removed: Boolean!
  name: String!
  organization: Organization
  removed_at: DateTime
  rewards: [Reward]
  updated_at: DateTime!
}

type RepositoryMaintainer {
  created_at: DateTime!
  github_id: String!
  id: ID!
  issued_rewards: [Reward]
  repository: Repository!
  role: RepositoryRole!
  user: User
}

enum RepositoryRole {
  ADMIN
  MAINTAIN
}

type Reward {
  claimed: Boolean!
  claimed_at: DateTime
  comment: String!
  contributor: Contributor
  created_at: DateTime!
  destination_address: String
  id: ID!
  issuer: RepositoryMaintainer!
  pr_number: Int!
  repository: Repository
  secret: String!
  tx_hash: String
  updated_at: DateTime!
}

type User {
  contributor: [Contributor]
  created_at: DateTime!
  email: String
  github_id: String!
  id: ID!
  maintenances: [RepositoryMaintainer]
  name: String!
  organizations: [Organization]
  updated_at: DateTime!
  wallet_address: String
}